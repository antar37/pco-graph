
    
    enum CalendarAttachmentOrderByEnum {
      id
content_type
created_at
description
file_size
name
updated_at
url
    }

    input CalendarAttachmentOrderInput {
      sort: sortEnum = asc
      field: CalendarAttachmentOrderByEnum
    }

    
      input CalendarAttachmentWhereAttributes {
        content_type: String
created_at: String
description: String
file_size: Int
name: String
updated_at: String
      }
    
    
      type CalendarAttachmentRelationships {
        CalendarEvent: [CalendarEvent]
      }
    

    type CalendarAttachmentAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        content_type: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        description: String
      

        """ example: 1 """
        file_size: Int
      

        """ example: string """
        name: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        url: String
      
    }

    type CalendarAttachment {
      id: ID!
      attributes: CalendarAttachmentAttributes
      relationships: CalendarAttachmentRelationships
    }
  

    enum CalendarConflictOrderByEnum {
      id
created_at
note
resolved_at
updated_at
    }

    input CalendarConflictOrderInput {
      sort: sortEnum = asc
      field: CalendarConflictOrderByEnum
    }

    
    
      type CalendarConflictRelationships {
        CalendarResolved_by: [CalendarPerson]
CalendarResource: [CalendarResource]
CalendarWinner: [CalendarEvent]
      }
    

    type CalendarConflictAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        note: String
      

        """ example: 2000-01-01T12:00:00Z """
        resolved_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CalendarConflict {
      id: ID!
      attributes: CalendarConflictAttributes
      relationships: CalendarConflictRelationships
    }
  

    enum CalendarEncryptedParamOrderByEnum {
      id
trigger_resource
    }

    input CalendarEncryptedParamOrderInput {
      sort: sortEnum = asc
      field: CalendarEncryptedParamOrderByEnum
    }

    
    

    type CalendarEncryptedParamAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        trigger_resource: String
      
    }

    type CalendarEncryptedParam {
      id: ID!
      attributes: CalendarEncryptedParamAttributes
      
    }
  

    enum CalendarEventOrderByEnum {
      id
approval_status
created_at
description
image_url
name
percent_approved
percent_rejected
registration_url
summary
updated_at
visible_in_church_center
    }

    input CalendarEventOrderInput {
      sort: sortEnum = asc
      field: CalendarEventOrderByEnum
    }

    
      input CalendarEventWhereAttributes {
        approval_status: String
created_at: String
name: String
percent_approved: Int
percent_rejected: Int
updated_at: String
visible_in_church_center: Boolean
      }
    
    
      type CalendarEventRelationships {
        CalendarAttachments: [CalendarAttachment]
CalendarConflicts: [CalendarConflict]
CalendarEvent_connections: [CalendarEventConnection]
CalendarEvent_instances: [CalendarEventInstance]
CalendarEvent_resource_requests: [CalendarEventResourceRequest]
CalendarFeed: [CalendarFeed]
CalendarOwner: [CalendarPerson]
CalendarResource_bookings: [CalendarResourceBooking]
CalendarTags: [CalendarTag]
      }
    

    type CalendarEventAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        approval_status: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        description: String
      

        """ example: string """
        image_url: String
      

        """ example: string """
        name: String
      

        """ example: 1 """
        percent_approved: Int
      

        """ example: 1 """
        percent_rejected: Int
      

        """ example: string """
        registration_url: String
      

        """ example: string """
        summary: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: true """
        visible_in_church_center: Boolean
      
    }

    type CalendarEvent {
      id: ID!
      attributes: CalendarEventAttributes
      relationships: CalendarEventRelationships
    }
  

    enum CalendarEventConnectionOrderByEnum {
      id
connected_to_id
connected_to_name
connected_to_type
product_name
connected_to_url
    }

    input CalendarEventConnectionOrderInput {
      sort: sortEnum = asc
      field: CalendarEventConnectionOrderByEnum
    }

    
      input CalendarEventConnectionWhereAttributes {
        product_name: String
      }
    
    

    type CalendarEventConnectionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: primary_key """
        connected_to_id: ID!
      

        """ example: string """
        connected_to_name: String
      

        """ example: string """
        connected_to_type: String
      

        """ example: string """
        product_name: String
      

        """ example: string """
        connected_to_url: String
      
    }

    type CalendarEventConnection {
      id: ID!
      attributes: CalendarEventConnectionAttributes
      
    }
  

    enum CalendarEventInstanceOrderByEnum {
      id
all_day_event
compact_recurrence_description
created_at
ends_at
location
recurrence
recurrence_description
starts_at
updated_at
church_center_url
published_starts_at
published_ends_at
    }

    input CalendarEventInstanceOrderInput {
      sort: sortEnum = asc
      field: CalendarEventInstanceOrderByEnum
    }

    
      input CalendarEventInstanceWhereAttributes {
        created_at: String
ends_at: String
starts_at: String
updated_at: String
      }
    
    
      type CalendarEventInstanceRelationships {
        CalendarEvent: [CalendarEvent]
CalendarEvent_times: [CalendarEventTime]
CalendarResource_bookings: [CalendarResourceBooking]
CalendarTags: [CalendarTag]
      }
    

    type CalendarEventInstanceAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        all_day_event: Boolean
      

        """ example: string """
        compact_recurrence_description: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        ends_at: String
      

        """ example: string """
        location: String
      

        """ example: string """
        recurrence: String
      

        """ example: string """
        recurrence_description: String
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        church_center_url: String
      

        """ example: string """
        published_starts_at: String
      

        """ example: string """
        published_ends_at: String
      
    }

    type CalendarEventInstance {
      id: ID!
      attributes: CalendarEventInstanceAttributes
      relationships: CalendarEventInstanceRelationships
    }
  

    enum CalendarEventResourceRequestOrderByEnum {
      id
approval_sent
approval_status
created_at
updated_at
notes
quantity
    }

    input CalendarEventResourceRequestOrderInput {
      sort: sortEnum = asc
      field: CalendarEventResourceRequestOrderByEnum
    }

    
      input CalendarEventResourceRequestWhereAttributes {
        approval_sent: Boolean
approval_status: String
created_at: String
updated_at: String
      }
    
    
      type CalendarEventResourceRequestRelationships {
        CalendarCreated_by: [CalendarPerson]
CalendarEvent: [CalendarEvent]
CalendarResource_bookings: [CalendarResourceBooking]
CalendarResource: [CalendarResource]
CalendarRoom_setup: [CalendarRoomSetup]
CalendarUpdated_by: [CalendarPerson]
      }
    

    type CalendarEventResourceRequestAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        approval_sent: Boolean
      

        """ example: string """
        approval_status: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        notes: String
      

        """ example: 1 """
        quantity: Int
      
    }

    type CalendarEventResourceRequest {
      id: ID!
      attributes: CalendarEventResourceRequestAttributes
      relationships: CalendarEventResourceRequestRelationships
    }
  

    enum CalendarEventTimeOrderByEnum {
      id
ends_at
starts_at
name
visible_on_kiosks
visible_on_widget_and_ical
    }

    input CalendarEventTimeOrderInput {
      sort: sortEnum = asc
      field: CalendarEventTimeOrderByEnum
    }

    
      input CalendarEventTimeWhereAttributes {
        ends_at: String
name: String
starts_at: String
visible_on_kiosks: Boolean
visible_on_widget_and_ical: Boolean
      }
    
    
      type CalendarEventTimeRelationships {
        CalendarEvent: [CalendarEvent]
      }
    

    type CalendarEventTimeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        ends_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        name: String
      

        """ example: true """
        visible_on_kiosks: Boolean
      

        """ example: true """
        visible_on_widget_and_ical: Boolean
      
    }

    type CalendarEventTime {
      id: ID!
      attributes: CalendarEventTimeAttributes
      relationships: CalendarEventTimeRelationships
    }
  

    enum CalendarFeedOrderByEnum {
      id
can_delete
default_church_center_visibility
feed_type
imported_at
name
source_id
    }

    input CalendarFeedOrderInput {
      sort: sortEnum = asc
      field: CalendarFeedOrderByEnum
    }

    
      input CalendarFeedWhereAttributes {
        feed_type: String
source_id: ID!
      }
    
    

    type CalendarFeedAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        can_delete: Boolean
      

        """ example: value """
        default_church_center_visibility: String
      

        """ example: value """
        feed_type: String
      

        """ example: 2000-01-01T12:00:00Z """
        imported_at: String
      

        """ example: string """
        name: String
      

        """ example: primary_key """
        source_id: ID!
      
    }

    type CalendarFeed {
      id: ID!
      attributes: CalendarFeedAttributes
      
    }
  

    enum CalendarJobStatusOrderByEnum {
      id
retries
errors
message
started_at
status
    }

    input CalendarJobStatusOrderInput {
      sort: sortEnum = asc
      field: CalendarJobStatusOrderByEnum
    }

    
    

    type CalendarJobStatusAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        retries: Int
      

        """ example: [object Object] """
        errors: String
      

        """ example: string """
        message: String
      

        """ example: 2000-01-01T12:00:00Z """
        started_at: String
      

        """ example: string """
        status: String
      
    }

    type CalendarJobStatus {
      id: ID!
      attributes: CalendarJobStatusAttributes
      
    }
  

    enum CalendarOrganizationOrderByEnum {
      id
name
time_zone
twenty_four_hour_time
date_format
onboarding
    }

    input CalendarOrganizationOrderInput {
      sort: sortEnum = asc
      field: CalendarOrganizationOrderByEnum
    }

    
    
      type CalendarOrganizationRelationships {
        CalendarAttachments: [CalendarAttachment]
CalendarConflicts: [CalendarConflict]
CalendarEvent_instances: [CalendarEventInstance]
CalendarEvent_resource_requests: [CalendarEventResourceRequest]
CalendarEvents: [CalendarEvent]
CalendarFeeds: [CalendarFeed]
CalendarJob_statuses: [CalendarJobStatus]
CalendarPeople: [CalendarPerson]
CalendarReport_templates: [CalendarReportTemplate]
CalendarResource_approval_groups: [CalendarResourceApprovalGroup]
CalendarResource_bookings: [CalendarResourceBooking]
CalendarResource_folders: [CalendarResourceFolder]
CalendarResource_questions: [CalendarResourceQuestion]
CalendarResources: [CalendarResource]
CalendarRoom_setups: [CalendarRoomSetup]
CalendarTag_groups: [CalendarTagGroup]
CalendarTags: [CalendarTag]
      }
    

    type CalendarOrganizationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        time_zone: String
      

        """ example: true """
        twenty_four_hour_time: Boolean
      

        """ example: string """
        date_format: String
      

        """ example: true """
        onboarding: Boolean
      
    }

    type CalendarOrganization {
      id: ID!
      attributes: CalendarOrganizationAttributes
      relationships: CalendarOrganizationRelationships
    }
  

    enum CalendarPersonOrderByEnum {
      id
created_at
first_name
last_name
middle_name
updated_at
avatar_url
child
contact_data
gender
has_access
name_prefix
name_suffix
pending_request_count
permissions
resolves_conflicts
site_administrator
status
event_permissions_type
people_permissions_type
room_permissions_type
resources_permissions_type
    }

    input CalendarPersonOrderInput {
      sort: sortEnum = asc
      field: CalendarPersonOrderByEnum
    }

    
      input CalendarPersonWhereAttributes {
        created_at: String
first_name: String
last_name: String
middle_name: String
updated_at: String
      }
    
    
      type CalendarPersonRelationships {
        CalendarEvent_resource_requests: [CalendarEventResourceRequest]
CalendarOrganization: [CalendarOrganization]
      }
    

    type CalendarPersonAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        first_name: String
      

        """ example: string """
        last_name: String
      

        """ example: string """
        middle_name: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        avatar_url: String
      

        """ example: true """
        child: Boolean
      

        """ example: string """
        contact_data: String
      

        """ example: string """
        gender: String
      

        """ example: true """
        has_access: Boolean
      

        """ example: string """
        name_prefix: String
      

        """ example: string """
        name_suffix: String
      

        """ example: 1 """
        pending_request_count: Int
      

        """ example: 1 """
        permissions: Int
      

        """ example: true """
        resolves_conflicts: Boolean
      

        """ example: true """
        site_administrator: Boolean
      

        """ example: value """
        status: String
      

        """ example: string """
        event_permissions_type: String
      

        """ example: string """
        people_permissions_type: String
      

        """ example: string """
        room_permissions_type: String
      

        """ example: string """
        resources_permissions_type: String
      
    }

    type CalendarPerson {
      id: ID!
      attributes: CalendarPersonAttributes
      relationships: CalendarPersonRelationships
    }
  

    enum CalendarReportTemplateOrderByEnum {
      id
body
created_at
description
title
updated_at
    }

    input CalendarReportTemplateOrderInput {
      sort: sortEnum = asc
      field: CalendarReportTemplateOrderByEnum
    }

    
    

    type CalendarReportTemplateAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        body: String
      

        """ example: string """
        created_at: String
      

        """ example: string """
        description: String
      

        """ example: string """
        title: String
      

        """ example: string """
        updated_at: String
      
    }

    type CalendarReportTemplate {
      id: ID!
      attributes: CalendarReportTemplateAttributes
      
    }
  

    enum CalendarRequiredApprovalOrderByEnum {
      id
    }

    input CalendarRequiredApprovalOrderInput {
      sort: sortEnum = asc
      field: CalendarRequiredApprovalOrderByEnum
    }

    
    
      type CalendarRequiredApprovalRelationships {
        CalendarResource: [CalendarResource]
      }
    

    type CalendarRequiredApprovalAttributes {
      
        """ example: primary_key """
        id: ID!
      
    }

    type CalendarRequiredApproval {
      id: ID!
      attributes: CalendarRequiredApprovalAttributes
      relationships: CalendarRequiredApprovalRelationships
    }
  

    enum CalendarResourceOrderByEnum {
      id
created_at
kind
name
serial_number
updated_at
description
expires_at
home_location
image
quantity
path_name
    }

    input CalendarResourceOrderInput {
      sort: sortEnum = asc
      field: CalendarResourceOrderByEnum
    }

    
      input CalendarResourceWhereAttributes {
        created_at: String
kind: String
name: String
path_name: String
serial_number: String
updated_at: String
      }
    
    
      type CalendarResourceRelationships {
        CalendarConflicts: [CalendarConflict]
CalendarEvent_resource_requests: [CalendarEventResourceRequest]
CalendarRequired_approvals: [CalendarRequiredApproval]
CalendarResource_approval_groups: [CalendarResourceApprovalGroup]
CalendarResource_bookings: [CalendarResourceBooking]
CalendarResource_folder: [CalendarResourceFolder]
CalendarResource_questions: [CalendarResourceQuestion]
CalendarRoom_setups: [CalendarRoomSetup]
      }
    

    type CalendarResourceAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        kind: String
      

        """ example: string """
        name: String
      

        """ example: string """
        serial_number: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        description: String
      

        """ example: 2000-01-01T12:00:00Z """
        expires_at: String
      

        """ example: string """
        home_location: String
      

        """ example: string """
        image: String
      

        """ example: 1 """
        quantity: Int
      

        """ example: string """
        path_name: String
      
    }

    type CalendarResource {
      id: ID!
      attributes: CalendarResourceAttributes
      relationships: CalendarResourceRelationships
    }
  

    enum CalendarResourceApprovalGroupOrderByEnum {
      id
created_at
name
updated_at
form_count
resource_count
room_count
    }

    input CalendarResourceApprovalGroupOrderInput {
      sort: sortEnum = asc
      field: CalendarResourceApprovalGroupOrderByEnum
    }

    
      input CalendarResourceApprovalGroupWhereAttributes {
        created_at: String
name: String
updated_at: String
      }
    
    
      type CalendarResourceApprovalGroupRelationships {
        CalendarEvent_resource_requests: [CalendarEventResourceRequest]
CalendarPeople: [CalendarPerson]
CalendarRequired_approvals: [CalendarRequiredApproval]
CalendarResources: [CalendarResource]
      }
    

    type CalendarResourceApprovalGroupAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        name: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 1 """
        form_count: Int
      

        """ example: 1 """
        resource_count: Int
      

        """ example: 1 """
        room_count: Int
      
    }

    type CalendarResourceApprovalGroup {
      id: ID!
      attributes: CalendarResourceApprovalGroupAttributes
      relationships: CalendarResourceApprovalGroupRelationships
    }
  

    enum CalendarResourceBookingOrderByEnum {
      id
created_at
ends_at
starts_at
updated_at
quantity
    }

    input CalendarResourceBookingOrderInput {
      sort: sortEnum = asc
      field: CalendarResourceBookingOrderByEnum
    }

    
      input CalendarResourceBookingWhereAttributes {
        created_at: String
ends_at: String
starts_at: String
updated_at: String
      }
    
    
      type CalendarResourceBookingRelationships {
        CalendarEvent_instance: [CalendarEventInstance]
CalendarEvent_resource_request: [CalendarEventResourceRequest]
CalendarResource: [CalendarResource]
      }
    

    type CalendarResourceBookingAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        ends_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 1 """
        quantity: Int
      
    }

    type CalendarResourceBooking {
      id: ID!
      attributes: CalendarResourceBookingAttributes
      relationships: CalendarResourceBookingRelationships
    }
  

    enum CalendarResourceFolderOrderByEnum {
      id
created_at
name
updated_at
ancestry
kind
path_name
    }

    input CalendarResourceFolderOrderInput {
      sort: sortEnum = asc
      field: CalendarResourceFolderOrderByEnum
    }

    
      input CalendarResourceFolderWhereAttributes {
        ancestry: String
created_at: String
name: String
path_name: String
updated_at: String
      }
    
    
      type CalendarResourceFolderRelationships {
        CalendarResources: [CalendarResource]
      }
    

    type CalendarResourceFolderAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        name: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        ancestry: String
      

        """ example: string """
        kind: String
      

        """ example: string """
        path_name: String
      
    }

    type CalendarResourceFolder {
      id: ID!
      attributes: CalendarResourceFolderAttributes
      relationships: CalendarResourceFolderRelationships
    }
  

    enum CalendarResourceQuestionOrderByEnum {
      id
created_at
kind
updated_at
choices
description
multiple_select
optional
position
question
    }

    input CalendarResourceQuestionOrderInput {
      sort: sortEnum = asc
      field: CalendarResourceQuestionOrderByEnum
    }

    
      input CalendarResourceQuestionWhereAttributes {
        created_at: String
kind: String
updated_at: String
      }
    
    

    type CalendarResourceQuestionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        kind: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        choices: String
      

        """ example: string """
        description: String
      

        """ example: true """
        multiple_select: Boolean
      

        """ example: true """
        optional: Boolean
      

        """ example: 1 """
        position: Int
      

        """ example: string """
        question: String
      
    }

    type CalendarResourceQuestion {
      id: ID!
      attributes: CalendarResourceQuestionAttributes
      
    }
  

    enum CalendarResourceSuggestionOrderByEnum {
      id
created_at
quantity
updated_at
    }

    input CalendarResourceSuggestionOrderInput {
      sort: sortEnum = asc
      field: CalendarResourceSuggestionOrderByEnum
    }

    
    
      type CalendarResourceSuggestionRelationships {
        CalendarResource: [CalendarResource]
      }
    

    type CalendarResourceSuggestionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 1 """
        quantity: Int
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CalendarResourceSuggestion {
      id: ID!
      attributes: CalendarResourceSuggestionAttributes
      relationships: CalendarResourceSuggestionRelationships
    }
  

    enum CalendarRoomSetupOrderByEnum {
      id
created_at
name
updated_at
description
diagram
diagram_url
diagram_thumbnail_url
    }

    input CalendarRoomSetupOrderInput {
      sort: sortEnum = asc
      field: CalendarRoomSetupOrderByEnum
    }

    
      input CalendarRoomSetupWhereAttributes {
        created_at: String
name: String
updated_at: String
      }
    
    
      type CalendarRoomSetupRelationships {
        CalendarContaining_resource: [CalendarResource]
CalendarResource_suggestions: [CalendarResourceSuggestion]
      }
    

    type CalendarRoomSetupAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        name: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        description: String
      

        """ example: string """
        diagram: String
      

        """ example: string """
        diagram_url: String
      

        """ example: string """
        diagram_thumbnail_url: String
      
    }

    type CalendarRoomSetup {
      id: ID!
      attributes: CalendarRoomSetupAttributes
      relationships: CalendarRoomSetupRelationships
    }
  

    enum CalendarTagOrderByEnum {
      id
church_center_category
color
created_at
name
position
updated_at
    }

    input CalendarTagOrderInput {
      sort: sortEnum = asc
      field: CalendarTagOrderByEnum
    }

    
      input CalendarTagWhereAttributes {
        church_center_category: Boolean
color: String
created_at: String
id: ID!
name: String
position: Int
updated_at: String
      }
    
    
      type CalendarTagRelationships {
        CalendarEvent_instances: [CalendarEventInstance]
CalendarEvents: [CalendarEvent]
CalendarTag_group: [CalendarTagGroup]
      }
    

    type CalendarTagAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        church_center_category: Boolean
      

        """ example: string """
        color: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        name: String
      

        """ example: 1.42 """
        position: Int
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CalendarTag {
      id: ID!
      attributes: CalendarTagAttributes
      relationships: CalendarTagRelationships
    }
  

    enum CalendarTagGroupOrderByEnum {
      id
created_at
name
updated_at
required
    }

    input CalendarTagGroupOrderInput {
      sort: sortEnum = asc
      field: CalendarTagGroupOrderByEnum
    }

    
      input CalendarTagGroupWhereAttributes {
        created_at: String
name: String
updated_at: String
      }
    
    
      type CalendarTagGroupRelationships {
        CalendarEvents: [CalendarEvent]
CalendarTags: [CalendarTag]
      }
    

    type CalendarTagGroupAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        name: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: true """
        required: Boolean
      
    }

    type CalendarTagGroup {
      id: ID!
      attributes: CalendarTagGroupAttributes
      relationships: CalendarTagGroupRelationships
    }
  

    enum CheckinsAttendanceTypeOrderByEnum {
      id
name
color
created_at
updated_at
limit
    }

    input CheckinsAttendanceTypeOrderInput {
      sort: sortEnum = asc
      field: CheckinsAttendanceTypeOrderByEnum
    }

    
      input CheckinsAttendanceTypeWhereAttributes {
        id: ID!
name: String
      }
    
    
      type CheckinsAttendanceTypeRelationships {
        CheckinsEvent: [CheckinsEvent]
CheckinsHeadcounts: [CheckinsHeadcount]
      }
    

    type CheckinsAttendanceTypeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        color: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 1 """
        limit: Int
      
    }

    type CheckinsAttendanceType {
      id: ID!
      attributes: CheckinsAttendanceTypeAttributes
      relationships: CheckinsAttendanceTypeRelationships
    }
  

    enum CheckinsCheckInOrderByEnum {
      id
first_name
last_name
medical_notes
number
security_code
created_at
updated_at
checked_out_at
confirmed_at
emergency_contact_name
emergency_contact_phone_number
one_time_guest
kind
    }

    input CheckinsCheckInOrderInput {
      sort: sortEnum = asc
      field: CheckinsCheckInOrderByEnum
    }

    
      input CheckinsCheckInWhereAttributes {
        created_at: String
security_code: String
updated_at: String
      }
    
    
      type CheckinsCheckInRelationships {
        CheckinsCheck_in_group: [CheckinsCheckInGroup]
CheckinsCheck_in_times: [CheckinsCheckInTime]
CheckinsChecked_in_at: [CheckinsStation]
CheckinsChecked_in_by: [CheckinsPerson]
CheckinsChecked_out_by: [CheckinsPerson]
CheckinsEvent: [CheckinsEvent]
CheckinsEvent_period: [CheckinsEventPeriod]
CheckinsEvent_times: [CheckinsEventTime]
CheckinsLocations: [CheckinsLocation]
CheckinsOptions: [CheckinsOption]
CheckinsPerson: [CheckinsPerson]
      }
    

    type CheckinsCheckInAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        first_name: String
      

        """ example: string """
        last_name: String
      

        """ example: string """
        medical_notes: String
      

        """ example: 1 """
        number: Int
      

        """ example: string """
        security_code: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        checked_out_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        confirmed_at: String
      

        """ example: string """
        emergency_contact_name: String
      

        """ example: string """
        emergency_contact_phone_number: String
      

        """ example: true """
        one_time_guest: Boolean
      

        """ example: string """
        kind: String
      
    }

    type CheckinsCheckIn {
      id: ID!
      attributes: CheckinsCheckInAttributes
      relationships: CheckinsCheckInRelationships
    }
  

    enum CheckinsCheckInGroupOrderByEnum {
      id
name_labels_count
security_labels_count
check_ins_count
print_status
created_at
updated_at
    }

    input CheckinsCheckInGroupOrderInput {
      sort: sortEnum = asc
      field: CheckinsCheckInGroupOrderByEnum
    }

    
    
      type CheckinsCheckInGroupRelationships {
        CheckinsCheck_ins: [CheckinsCheckIn]
CheckinsEvent_period: [CheckinsEventPeriod]
CheckinsPrint_station: [CheckinsStation]
      }
    

    type CheckinsCheckInGroupAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        name_labels_count: Int
      

        """ example: 1 """
        security_labels_count: Int
      

        """ example: 1 """
        check_ins_count: Int
      

        """ example: value """
        print_status: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CheckinsCheckInGroup {
      id: ID!
      attributes: CheckinsCheckInGroupAttributes
      relationships: CheckinsCheckInGroupRelationships
    }
  

    enum CheckinsCheckInTimeOrderByEnum {
      id
kind
has_validated
services_integrated
alerts
    }

    input CheckinsCheckInTimeOrderInput {
      sort: sortEnum = asc
      field: CheckinsCheckInTimeOrderByEnum
    }

    
    

    type CheckinsCheckInTimeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        kind: String
      

        """ example: true """
        has_validated: Boolean
      

        """ example: true """
        services_integrated: Boolean
      

        """ example:  """
        alerts: String
      
    }

    type CheckinsCheckInTime {
      id: ID!
      attributes: CheckinsCheckInTimeAttributes
      
    }
  

    enum CheckinsEventOrderByEnum {
      id
name
frequency
enable_services_integration
created_at
updated_at
archived_at
integration_key
location_times_enabled
pre_select_enabled
app_source
    }

    input CheckinsEventOrderInput {
      sort: sortEnum = asc
      field: CheckinsEventOrderByEnum
    }

    
      input CheckinsEventWhereAttributes {
        id: ID!
name: String
      }
    
    
      type CheckinsEventRelationships {
        CheckinsAttendance_types: [CheckinsAttendanceType]
CheckinsCheck_ins: [CheckinsCheckIn]
CheckinsCurrent_event_times: [CheckinsEventTime]
CheckinsEvent_labels: [CheckinsEventLabel]
CheckinsEvent_periods: [CheckinsEventPeriod]
CheckinsLocations: [CheckinsLocation]
CheckinsPerson_events: [CheckinsPersonEvent]
      }
    

    type CheckinsEventAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        frequency: String
      

        """ example: true """
        enable_services_integration: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        archived_at: String
      

        """ example: string """
        integration_key: String
      

        """ example: true """
        location_times_enabled: Boolean
      

        """ example: true """
        pre_select_enabled: Boolean
      

        """ example: string """
        app_source: String
      
    }

    type CheckinsEvent {
      id: ID!
      attributes: CheckinsEventAttributes
      relationships: CheckinsEventRelationships
    }
  

    enum CheckinsEventLabelOrderByEnum {
      id
quantity
for_regular
for_guest
for_volunteer
created_at
updated_at
    }

    input CheckinsEventLabelOrderInput {
      sort: sortEnum = asc
      field: CheckinsEventLabelOrderByEnum
    }

    
    
      type CheckinsEventLabelRelationships {
        CheckinsEvent: [CheckinsEvent]
CheckinsLabel: [CheckinsLabel]
      }
    

    type CheckinsEventLabelAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        quantity: Int
      

        """ example: true """
        for_regular: Boolean
      

        """ example: true """
        for_guest: Boolean
      

        """ example: true """
        for_volunteer: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CheckinsEventLabel {
      id: ID!
      attributes: CheckinsEventLabelAttributes
      relationships: CheckinsEventLabelRelationships
    }
  

    enum CheckinsEventPeriodOrderByEnum {
      id
starts_at
ends_at
regular_count
guest_count
volunteer_count
note
created_at
updated_at
    }

    input CheckinsEventPeriodOrderInput {
      sort: sortEnum = asc
      field: CheckinsEventPeriodOrderByEnum
    }

    
      input CheckinsEventPeriodWhereAttributes {
        ends_at: String
starts_at: String
      }
    
    
      type CheckinsEventPeriodRelationships {
        CheckinsCheck_ins: [CheckinsCheckIn]
CheckinsEvent: [CheckinsEvent]
CheckinsEvent_times: [CheckinsEventTime]
CheckinsLocation_event_periods: [CheckinsLocationEventPeriod]
      }
    

    type CheckinsEventPeriodAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        ends_at: String
      

        """ example: 1 """
        regular_count: Int
      

        """ example: 1 """
        guest_count: Int
      

        """ example: 1 """
        volunteer_count: Int
      

        """ example: string """
        note: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CheckinsEventPeriod {
      id: ID!
      attributes: CheckinsEventPeriodAttributes
      relationships: CheckinsEventPeriodRelationships
    }
  

    enum CheckinsEventTimeOrderByEnum {
      id
total_count
starts_at
shows_at
hides_at
regular_count
guest_count
volunteer_count
created_at
updated_at
name
hour
minute
day_of_week
    }

    input CheckinsEventTimeOrderInput {
      sort: sortEnum = asc
      field: CheckinsEventTimeOrderByEnum
    }

    
      input CheckinsEventTimeWhereAttributes {
        created_at: String
updated_at: String
      }
    
    
      type CheckinsEventTimeRelationships {
        CheckinsAvailable_locations: [CheckinsLocation]
CheckinsCheck_ins: [CheckinsCheckIn]
CheckinsEvent: [CheckinsEvent]
CheckinsEvent_period: [CheckinsEventPeriod]
CheckinsHeadcounts: [CheckinsHeadcount]
CheckinsLocation_event_times: [CheckinsLocationEventTime]
      }
    

    type CheckinsEventTimeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        total_count: Int
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        shows_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        hides_at: String
      

        """ example: 1 """
        regular_count: Int
      

        """ example: 1 """
        guest_count: Int
      

        """ example: 1 """
        volunteer_count: Int
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        name: String
      

        """ example: 1 """
        hour: Int
      

        """ example: 1 """
        minute: Int
      

        """ example: 1 """
        day_of_week: Int
      
    }

    type CheckinsEventTime {
      id: ID!
      attributes: CheckinsEventTimeAttributes
      relationships: CheckinsEventTimeRelationships
    }
  

    enum CheckinsHeadcountOrderByEnum {
      id
total
updated_at
created_at
    }

    input CheckinsHeadcountOrderInput {
      sort: sortEnum = asc
      field: CheckinsHeadcountOrderByEnum
    }

    
      input CheckinsHeadcountWhereAttributes {
        created_at: String
updated_at: String
      }
    
    
      type CheckinsHeadcountRelationships {
        CheckinsAttendance_type: [CheckinsAttendanceType]
CheckinsEvent_time: [CheckinsEventTime]
      }
    

    type CheckinsHeadcountAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        total: Int
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      
    }

    type CheckinsHeadcount {
      id: ID!
      attributes: CheckinsHeadcountAttributes
      relationships: CheckinsHeadcountRelationships
    }
  

    enum CheckinsLabelOrderByEnum {
      id
name
xml
prints_for
roll
created_at
updated_at
    }

    input CheckinsLabelOrderInput {
      sort: sortEnum = asc
      field: CheckinsLabelOrderByEnum
    }

    
    
      type CheckinsLabelRelationships {
        CheckinsEvent_labels: [CheckinsEventLabel]
CheckinsLocation_labels: [CheckinsLocationLabel]
      }
    

    type CheckinsLabelAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        xml: String
      

        """ example: string """
        prints_for: String
      

        """ example: string """
        roll: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CheckinsLabel {
      id: ID!
      attributes: CheckinsLabelAttributes
      relationships: CheckinsLabelRelationships
    }
  

    enum CheckinsLocationOrderByEnum {
      id
name
kind
opened
questions
age_min_in_months
age_max_in_months
age_range_by
age_on
child_or_adult
effective_date
gender
grade_min
grade_max
max_occupancy
min_volunteers
attendees_per_volunteer
position
updated_at
created_at
    }

    input CheckinsLocationOrderInput {
      sort: sortEnum = asc
      field: CheckinsLocationOrderByEnum
    }

    
    
      type CheckinsLocationRelationships {
        CheckinsCheck_ins: [CheckinsCheckIn]
CheckinsEvent: [CheckinsEvent]
CheckinsLocation_event_periods: [CheckinsLocationEventPeriod]
CheckinsLocation_event_times: [CheckinsLocationEventTime]
CheckinsLocation_labels: [CheckinsLocationLabel]
CheckinsLocations: [CheckinsLocation]
CheckinsOptions: [CheckinsOption]
CheckinsParent: [CheckinsLocation]
      }
    

    type CheckinsLocationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        kind: String
      

        """ example: true """
        opened: Boolean
      

        """ example: string """
        questions: String
      

        """ example: 1 """
        age_min_in_months: Int
      

        """ example: 1 """
        age_max_in_months: Int
      

        """ example: string """
        age_range_by: String
      

        """ example: 2000-01-01 """
        age_on: String
      

        """ example: string """
        child_or_adult: String
      

        """ example: 2000-01-01 """
        effective_date: String
      

        """ example: string """
        gender: String
      

        """ example: 1 """
        grade_min: Int
      

        """ example: 1 """
        grade_max: Int
      

        """ example: 1 """
        max_occupancy: Int
      

        """ example: 1 """
        min_volunteers: Int
      

        """ example: 1 """
        attendees_per_volunteer: Int
      

        """ example: 1 """
        position: Int
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      
    }

    type CheckinsLocation {
      id: ID!
      attributes: CheckinsLocationAttributes
      relationships: CheckinsLocationRelationships
    }
  

    enum CheckinsLocationEventPeriodOrderByEnum {
      id
regular_count
guest_count
volunteer_count
created_at
updated_at
    }

    input CheckinsLocationEventPeriodOrderInput {
      sort: sortEnum = asc
      field: CheckinsLocationEventPeriodOrderByEnum
    }

    
    
      type CheckinsLocationEventPeriodRelationships {
        CheckinsCheck_ins: [CheckinsCheckIn]
CheckinsEvent_period: [CheckinsEventPeriod]
CheckinsLocation: [CheckinsLocation]
      }
    

    type CheckinsLocationEventPeriodAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        regular_count: Int
      

        """ example: 1 """
        guest_count: Int
      

        """ example: 1 """
        volunteer_count: Int
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CheckinsLocationEventPeriod {
      id: ID!
      attributes: CheckinsLocationEventPeriodAttributes
      relationships: CheckinsLocationEventPeriodRelationships
    }
  

    enum CheckinsLocationEventTimeOrderByEnum {
      id
regular_count
guest_count
volunteer_count
created_at
updated_at
    }

    input CheckinsLocationEventTimeOrderInput {
      sort: sortEnum = asc
      field: CheckinsLocationEventTimeOrderByEnum
    }

    
      input CheckinsLocationEventTimeWhereAttributes {
        created_at: String
updated_at: String
      }
    
    
      type CheckinsLocationEventTimeRelationships {
        CheckinsCheck_ins: [CheckinsCheckIn]
CheckinsEvent_time: [CheckinsEventTime]
CheckinsLocation: [CheckinsLocation]
      }
    

    type CheckinsLocationEventTimeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        regular_count: Int
      

        """ example: 1 """
        guest_count: Int
      

        """ example: 1 """
        volunteer_count: Int
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CheckinsLocationEventTime {
      id: ID!
      attributes: CheckinsLocationEventTimeAttributes
      relationships: CheckinsLocationEventTimeRelationships
    }
  

    enum CheckinsLocationLabelOrderByEnum {
      id
quantity
for_regular
for_guest
for_volunteer
created_at
updated_at
    }

    input CheckinsLocationLabelOrderInput {
      sort: sortEnum = asc
      field: CheckinsLocationLabelOrderByEnum
    }

    
    
      type CheckinsLocationLabelRelationships {
        CheckinsLabel: [CheckinsLabel]
CheckinsLocation: [CheckinsLocation]
      }
    

    type CheckinsLocationLabelAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        quantity: Int
      

        """ example: true """
        for_regular: Boolean
      

        """ example: true """
        for_guest: Boolean
      

        """ example: true """
        for_volunteer: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CheckinsLocationLabel {
      id: ID!
      attributes: CheckinsLocationLabelAttributes
      relationships: CheckinsLocationLabelRelationships
    }
  

    enum CheckinsOptionOrderByEnum {
      id
body
quantity
created_at
updated_at
    }

    input CheckinsOptionOrderInput {
      sort: sortEnum = asc
      field: CheckinsOptionOrderByEnum
    }

    
    
      type CheckinsOptionRelationships {
        CheckinsCheck_ins: [CheckinsCheckIn]
CheckinsLabel: [CheckinsLabel]
      }
    

    type CheckinsOptionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        body: String
      

        """ example: 1 """
        quantity: Int
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CheckinsOption {
      id: ID!
      attributes: CheckinsOptionAttributes
      relationships: CheckinsOptionRelationships
    }
  

    enum CheckinsOrganizationOrderByEnum {
      id
date_format_pattern
time_zone_olson
name
daily_check_ins
time_zone
avatar_url
created_at
updated_at
    }

    input CheckinsOrganizationOrderInput {
      sort: sortEnum = asc
      field: CheckinsOrganizationOrderByEnum
    }

    
    
      type CheckinsOrganizationRelationships {
        CheckinsCheck_ins: [CheckinsCheckIn]
CheckinsEvent_times: [CheckinsEventTime]
CheckinsEvents: [CheckinsEvent]
CheckinsHeadcounts: [CheckinsHeadcount]
CheckinsLabels: [CheckinsLabel]
CheckinsOptions: [CheckinsOption]
CheckinsPasses: [CheckinsPass]
CheckinsPeople: [CheckinsPerson]
CheckinsStations: [CheckinsStation]
CheckinsThemes: [CheckinsTheme]
      }
    

    type CheckinsOrganizationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        date_format_pattern: String
      

        """ example: string """
        time_zone_olson: String
      

        """ example: string """
        name: String
      

        """ example: 1 """
        daily_check_ins: Int
      

        """ example: string """
        time_zone: String
      

        """ example: string """
        avatar_url: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CheckinsOrganization {
      id: ID!
      attributes: CheckinsOrganizationAttributes
      relationships: CheckinsOrganizationRelationships
    }
  

    enum CheckinsPassOrderByEnum {
      id
code
kind
created_at
updated_at
    }

    input CheckinsPassOrderInput {
      sort: sortEnum = asc
      field: CheckinsPassOrderByEnum
    }

    
      input CheckinsPassWhereAttributes {
        code: String
      }
    
    
      type CheckinsPassRelationships {
        CheckinsPerson: [CheckinsPerson]
      }
    

    type CheckinsPassAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        code: String
      

        """ example: string """
        kind: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type CheckinsPass {
      id: ID!
      attributes: CheckinsPassAttributes
      relationships: CheckinsPassRelationships
    }
  

    enum CheckinsPersonOrderByEnum {
      id
addresses
email_addresses
phone_numbers
avatar_url
name_prefix
first_name
middle_name
last_name
name_suffix
birthdate
grade
gender
medical_notes
child
permission
headcounter
last_checked_in_at
check_in_count
created_at
updated_at
passed_background_check
demographic_avatar_url
name
top_permission
ignore_filters
    }

    input CheckinsPersonOrderInput {
      sort: sortEnum = asc
      field: CheckinsPersonOrderByEnum
    }

    
      input CheckinsPersonWhereAttributes {
        headcounter: Boolean
ignore_filters: Boolean
permission: String
search_name: String
      }
    
    
      type CheckinsPersonRelationships {
        CheckinsCheck_ins: [CheckinsCheckIn]
CheckinsOrganization: [CheckinsOrganization]
CheckinsPasses: [CheckinsPass]
CheckinsPerson_events: [CheckinsPersonEvent]
      }
    

    type CheckinsPersonAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example:  """
        addresses: String
      

        """ example:  """
        email_addresses: String
      

        """ example:  """
        phone_numbers: String
      

        """ example: string """
        avatar_url: String
      

        """ example: string """
        name_prefix: String
      

        """ example: string """
        first_name: String
      

        """ example: string """
        middle_name: String
      

        """ example: string """
        last_name: String
      

        """ example: string """
        name_suffix: String
      

        """ example: 2000-01-01 """
        birthdate: String
      

        """ example: 1 """
        grade: Int
      

        """ example: string """
        gender: String
      

        """ example: string """
        medical_notes: String
      

        """ example: true """
        child: Boolean
      

        """ example: string """
        permission: String
      

        """ example: true """
        headcounter: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        last_checked_in_at: String
      

        """ example: 1 """
        check_in_count: Int
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: true """
        passed_background_check: Boolean
      

        """ example: string """
        demographic_avatar_url: String
      

        """ example: string """
        name: String
      

        """ example: string """
        top_permission: String
      

        """ example: true """
        ignore_filters: Boolean
      
    }

    type CheckinsPerson {
      id: ID!
      attributes: CheckinsPersonAttributes
      relationships: CheckinsPersonRelationships
    }
  

    enum CheckinsPersonEventOrderByEnum {
      id
check_in_count
updated_at
created_at
    }

    input CheckinsPersonEventOrderInput {
      sort: sortEnum = asc
      field: CheckinsPersonEventOrderByEnum
    }

    
    
      type CheckinsPersonEventRelationships {
        CheckinsEvent: [CheckinsEvent]
CheckinsFirst_check_in: [CheckinsCheckIn]
CheckinsLast_check_in: [CheckinsCheckIn]
CheckinsPerson: [CheckinsPerson]
      }
    

    type CheckinsPersonEventAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        check_in_count: Int
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      
    }

    type CheckinsPersonEvent {
      id: ID!
      attributes: CheckinsPersonEventAttributes
      relationships: CheckinsPersonEventRelationships
    }
  

    enum CheckinsRosterListPersonOrderByEnum {
      id
first_name
last_name
name
demographic_avatar_url
grade
gender
medical_notes
birthdate
    }

    input CheckinsRosterListPersonOrderInput {
      sort: sortEnum = asc
      field: CheckinsRosterListPersonOrderByEnum
    }

    
    

    type CheckinsRosterListPersonAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        first_name: String
      

        """ example: string """
        last_name: String
      

        """ example: string """
        name: String
      

        """ example: string """
        demographic_avatar_url: String
      

        """ example: string """
        grade: String
      

        """ example: string """
        gender: String
      

        """ example: string """
        medical_notes: String
      

        """ example: 2000-01-01T12:00:00Z """
        birthdate: String
      
    }

    type CheckinsRosterListPerson {
      id: ID!
      attributes: CheckinsRosterListPersonAttributes
      
    }
  

    enum CheckinsStationOrderByEnum {
      id
online
mode
name
timeout_seconds
input_type
input_type_options
created_at
updated_at
next_shows_at
open_for_check_in
closes_at
check_in_count
    }

    input CheckinsStationOrderInput {
      sort: sortEnum = asc
      field: CheckinsStationOrderByEnum
    }

    
    
      type CheckinsStationRelationships {
        CheckinsCheck_in_groups: [CheckinsCheckInGroup]
CheckinsChecked_in_at_check_ins: [CheckinsCheckIn]
CheckinsEvent: [CheckinsEvent]
CheckinsLocation: [CheckinsLocation]
CheckinsPrint_station: [CheckinsStation]
CheckinsTheme: [CheckinsTheme]
      }
    

    type CheckinsStationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        online: Boolean
      

        """ example: 1 """
        mode: Int
      

        """ example: string """
        name: String
      

        """ example: 1 """
        timeout_seconds: Int
      

        """ example: value """
        input_type: String
      

        """ example: value """
        input_type_options: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        next_shows_at: String
      

        """ example: true """
        open_for_check_in: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        closes_at: String
      

        """ example: 1 """
        check_in_count: Int
      
    }

    type CheckinsStation {
      id: ID!
      attributes: CheckinsStationAttributes
      relationships: CheckinsStationRelationships
    }
  

    enum CheckinsThemeOrderByEnum {
      id
image_thumbnail
name
color
text_color
image
created_at
updated_at
background_color
mode
    }

    input CheckinsThemeOrderInput {
      sort: sortEnum = asc
      field: CheckinsThemeOrderByEnum
    }

    
    

    type CheckinsThemeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        image_thumbnail: String
      

        """ example: string """
        name: String
      

        """ example: string """
        color: String
      

        """ example: string """
        text_color: String
      

        """ example: string """
        image: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        background_color: String
      

        """ example: string """
        mode: String
      
    }

    type CheckinsTheme {
      id: ID!
      attributes: CheckinsThemeAttributes
      
    }
  

    enum GivingBatchOrderByEnum {
      id
created_at
updated_at
committed_at
description
donations_count
total_cents
total_currency
status
    }

    input GivingBatchOrderInput {
      sort: sortEnum = asc
      field: GivingBatchOrderByEnum
    }

    
      input GivingBatchWhereAttributes {
        updated_at: String
      }
    
    
      type GivingBatchRelationships {
        GivingBatch_group: [GivingBatchGroup]
GivingDonations: [GivingDonation]
GivingOwner: [GivingPerson]
      }
    

    type GivingBatchAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        committed_at: String
      

        """ example: string """
        description: String
      

        """ example: 1 """
        donations_count: Int
      

        """ example: 1 """
        total_cents: Int
      

        """ example: string """
        total_currency: String
      

        """ example: string """
        status: String
      
    }

    type GivingBatch {
      id: ID!
      attributes: GivingBatchAttributes
      relationships: GivingBatchRelationships
    }
  

    enum GivingBatchGroupOrderByEnum {
      id
created_at
updated_at
description
committed
total_cents
total_currency
status
    }

    input GivingBatchGroupOrderInput {
      sort: sortEnum = asc
      field: GivingBatchGroupOrderByEnum
    }

    
      input GivingBatchGroupWhereAttributes {
        updated_at: String
      }
    
    
      type GivingBatchGroupRelationships {
        GivingBatches: [GivingBatch]
GivingOwner: [GivingPerson]
      }
    

    type GivingBatchGroupAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        description: String
      

        """ example: true """
        committed: Boolean
      

        """ example: 1 """
        total_cents: Int
      

        """ example: string """
        total_currency: String
      

        """ example: string """
        status: String
      
    }

    type GivingBatchGroup {
      id: ID!
      attributes: GivingBatchGroupAttributes
      relationships: GivingBatchGroupRelationships
    }
  

    enum GivingCampusOrderByEnum {
      id
name
address
    }

    input GivingCampusOrderInput {
      sort: sortEnum = asc
      field: GivingCampusOrderByEnum
    }

    
    
      type GivingCampusRelationships {
        GivingDonations: [GivingDonation]
      }
    

    type GivingCampusAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: [object Object] """
        address: String
      
    }

    type GivingCampus {
      id: ID!
      attributes: GivingCampusAttributes
      relationships: GivingCampusRelationships
    }
  

    enum GivingDesignationOrderByEnum {
      id
amount_cents
amount_currency
    }

    input GivingDesignationOrderInput {
      sort: sortEnum = asc
      field: GivingDesignationOrderByEnum
    }

    
    
      type GivingDesignationRelationships {
        GivingFund: [GivingFund]
      }
    

    type GivingDesignationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        amount_cents: Int
      

        """ example: string """
        amount_currency: String
      
    }

    type GivingDesignation {
      id: ID!
      attributes: GivingDesignationAttributes
      relationships: GivingDesignationRelationships
    }
  

    enum GivingDesignationRefundOrderByEnum {
      id
amount_cents
amount_currency
    }

    input GivingDesignationRefundOrderInput {
      sort: sortEnum = asc
      field: GivingDesignationRefundOrderByEnum
    }

    
    
      type GivingDesignationRefundRelationships {
        GivingDesignation: [GivingDesignation]
      }
    

    type GivingDesignationRefundAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        amount_cents: Int
      

        """ example: string """
        amount_currency: String
      
    }

    type GivingDesignationRefund {
      id: ID!
      attributes: GivingDesignationRefundAttributes
      relationships: GivingDesignationRefundRelationships
    }
  

    enum GivingDonationOrderByEnum {
      id
created_at
updated_at
payment_method_sub
payment_last4
payment_brand
payment_check_number
payment_check_dated_at
fee_cents
payment_method
received_at
amount_cents
payment_status
completed_at
amount_currency
fee_currency
refunded
refundable
    }

    input GivingDonationOrderInput {
      sort: sortEnum = asc
      field: GivingDonationOrderByEnum
    }

    
      input GivingDonationWhereAttributes {
        completed_at: String
created_at: String
payment_method: String
received_at: String
updated_at: String
      }
    
    
      type GivingDonationRelationships {
        GivingCampus: [GivingCampus]
GivingDesignations: [GivingDesignation]
GivingLabels: [GivingLabel]
GivingNote: [GivingNote]
GivingRefund: [GivingRefund]
      }
    

    type GivingDonationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: value """
        payment_method_sub: String
      

        """ example: string """
        payment_last4: String
      

        """ example: string """
        payment_brand: String
      

        """ example: 1 """
        payment_check_number: Int
      

        """ example: 2000-01-01 """
        payment_check_dated_at: String
      

        """ example: 1 """
        fee_cents: Int
      

        """ example: value """
        payment_method: String
      

        """ example: 2000-01-01T12:00:00Z """
        received_at: String
      

        """ example: 1 """
        amount_cents: Int
      

        """ example: value """
        payment_status: String
      

        """ example: 2000-01-01T12:00:00Z """
        completed_at: String
      

        """ example: USD """
        amount_currency: String
      

        """ example: USD """
        fee_currency: String
      

        """ example: true """
        refunded: Boolean
      

        """ example: true """
        refundable: Boolean
      
    }

    type GivingDonation {
      id: ID!
      attributes: GivingDonationAttributes
      relationships: GivingDonationRelationships
    }
  

    enum GivingFundOrderByEnum {
      id
created_at
updated_at
name
ledger_code
description
visibility
default
color
deletable
    }

    input GivingFundOrderInput {
      sort: sortEnum = asc
      field: GivingFundOrderByEnum
    }

    
      input GivingFundWhereAttributes {
        default: Boolean
id: ID!
name: String
visibility: String
      }
    
    

    type GivingFundAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        name: String
      

        """ example: string """
        ledger_code: String
      

        """ example: string """
        description: String
      

        """ example: value """
        visibility: String
      

        """ example: true """
        default: Boolean
      

        """ example: string """
        color: String
      

        """ example: true """
        deletable: Boolean
      
    }

    type GivingFund {
      id: ID!
      attributes: GivingFundAttributes
      
    }
  

    enum GivingLabelOrderByEnum {
      id
slug
    }

    input GivingLabelOrderInput {
      sort: sortEnum = asc
      field: GivingLabelOrderByEnum
    }

    
      input GivingLabelWhereAttributes {
        slug: String
      }
    
    

    type GivingLabelAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        slug: String
      
    }

    type GivingLabel {
      id: ID!
      attributes: GivingLabelAttributes
      
    }
  

    enum GivingNoteOrderByEnum {
      id
body
    }

    input GivingNoteOrderInput {
      sort: sortEnum = asc
      field: GivingNoteOrderByEnum
    }

    
    

    type GivingNoteAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        body: String
      
    }

    type GivingNote {
      id: ID!
      attributes: GivingNoteAttributes
      
    }
  

    enum GivingOrganizationOrderByEnum {
      id
name
time_zone
    }

    input GivingOrganizationOrderInput {
      sort: sortEnum = asc
      field: GivingOrganizationOrderByEnum
    }

    
    
      type GivingOrganizationRelationships {
        GivingBatch_groups: [GivingBatchGroup]
GivingBatches: [GivingBatch]
GivingCampuses: [GivingCampus]
GivingDonations: [GivingDonation]
GivingFunds: [GivingFund]
GivingLabels: [GivingLabel]
GivingPayment_sources: [GivingPaymentSource]
GivingPeople: [GivingPerson]
GivingRecurring_donations: [GivingRecurringDonation]
      }
    

    type GivingOrganizationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        time_zone: String
      
    }

    type GivingOrganization {
      id: ID!
      attributes: GivingOrganizationAttributes
      relationships: GivingOrganizationRelationships
    }
  

    enum GivingPaymentMethodOrderByEnum {
      id
created_at
updated_at
method_type
method_subtype
last4
brand
expiration
verified
    }

    input GivingPaymentMethodOrderInput {
      sort: sortEnum = asc
      field: GivingPaymentMethodOrderByEnum
    }

    
    
      type GivingPaymentMethodRelationships {
        GivingRecurring_donations: [GivingRecurringDonation]
      }
    

    type GivingPaymentMethodAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: value """
        method_type: String
      

        """ example: string """
        method_subtype: String
      

        """ example: string """
        last4: String
      

        """ example: string """
        brand: String
      

        """ example: 2000-01-01 """
        expiration: String
      

        """ example: true """
        verified: Boolean
      
    }

    type GivingPaymentMethod {
      id: ID!
      attributes: GivingPaymentMethodAttributes
      relationships: GivingPaymentMethodRelationships
    }
  

    enum GivingPaymentSourceOrderByEnum {
      id
created_at
updated_at
name
    }

    input GivingPaymentSourceOrderInput {
      sort: sortEnum = asc
      field: GivingPaymentSourceOrderByEnum
    }

    
    
      type GivingPaymentSourceRelationships {
        GivingDonations: [GivingDonation]
      }
    

    type GivingPaymentSourceAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        name: String
      
    }

    type GivingPaymentSource {
      id: ID!
      attributes: GivingPaymentSourceAttributes
      relationships: GivingPaymentSourceRelationships
    }
  

    enum GivingPersonOrderByEnum {
      id
permissions
email_addresses
addresses
phone_numbers
first_name
last_name
donor_number
    }

    input GivingPersonOrderInput {
      sort: sortEnum = asc
      field: GivingPersonOrderByEnum
    }

    
      input GivingPersonWhereAttributes {
        first_name: String
last_name: String
      }
    
    
      type GivingPersonRelationships {
        GivingBatch_groups: [GivingBatchGroup]
GivingBatches: [GivingBatch]
GivingDonations: [GivingDonation]
GivingPayment_methods: [GivingPaymentMethod]
GivingPledges: [GivingPledge]
GivingPrimary_campus: [GivingCampus]
GivingRecurring_donations: [GivingRecurringDonation]
      }
    

    type GivingPersonAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        permissions: String
      

        """ example:  """
        email_addresses: String
      

        """ example:  """
        addresses: String
      

        """ example:  """
        phone_numbers: String
      

        """ example: string """
        first_name: String
      

        """ example: string """
        last_name: String
      

        """ example: 1 """
        donor_number: Int
      
    }

    type GivingPerson {
      id: ID!
      attributes: GivingPersonAttributes
      relationships: GivingPersonRelationships
    }
  

    enum GivingPledgeOrderByEnum {
      id
created_at
updated_at
amount_cents
amount_currency
joint_giver_amount_cents
donated_total_cents
joint_giver_donated_total_cents
    }

    input GivingPledgeOrderInput {
      sort: sortEnum = asc
      field: GivingPledgeOrderByEnum
    }

    
      input GivingPledgeWhereAttributes {
        created_at: String
updated_at: String
      }
    
    
      type GivingPledgeRelationships {
        GivingJoint_giver: [GivingPerson]
GivingPledge_campaign: [GivingPledgeCampaign]
      }
    

    type GivingPledgeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 1 """
        amount_cents: Int
      

        """ example: USD """
        amount_currency: String
      

        """ example: 1 """
        joint_giver_amount_cents: Int
      

        """ example: 1 """
        donated_total_cents: Int
      

        """ example: 1 """
        joint_giver_donated_total_cents: Int
      
    }

    type GivingPledge {
      id: ID!
      attributes: GivingPledgeAttributes
      relationships: GivingPledgeRelationships
    }
  

    enum GivingPledgeCampaignOrderByEnum {
      id
created_at
updated_at
name
description
starts_at
ends_at
goal_cents
goal_currency
show_goal_in_church_center
received_total_from_pledges_cents
received_total_outside_of_pledges_cents
    }

    input GivingPledgeCampaignOrderInput {
      sort: sortEnum = asc
      field: GivingPledgeCampaignOrderByEnum
    }

    
      input GivingPledgeCampaignWhereAttributes {
        ends_at: String
starts_at: String
      }
    
    
      type GivingPledgeCampaignRelationships {
        GivingFund: [GivingFund]
GivingPledges: [GivingPledge]
      }
    

    type GivingPledgeCampaignAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        name: String
      

        """ example: string """
        description: String
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        ends_at: String
      

        """ example: 1 """
        goal_cents: Int
      

        """ example: USD """
        goal_currency: String
      

        """ example: true """
        show_goal_in_church_center: Boolean
      

        """ example: 1 """
        received_total_from_pledges_cents: Int
      

        """ example: 1 """
        received_total_outside_of_pledges_cents: Int
      
    }

    type GivingPledgeCampaign {
      id: ID!
      attributes: GivingPledgeCampaignAttributes
      relationships: GivingPledgeCampaignRelationships
    }
  

    enum GivingRecurringDonationOrderByEnum {
      id
created_at
updated_at
release_hold_at
amount_cents
status
last_donation_received_at
next_occurrence
schedule
amount_currency
    }

    input GivingRecurringDonationOrderInput {
      sort: sortEnum = asc
      field: GivingRecurringDonationOrderByEnum
    }

    
    
      type GivingRecurringDonationRelationships {
        GivingPayment_method: [GivingPaymentMethod]
GivingDesignations: [GivingRecurringDonationDesignation]
      }
    

    type GivingRecurringDonationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        release_hold_at: String
      

        """ example: 1 """
        amount_cents: Int
      

        """ example: string """
        status: String
      

        """ example: 2000-01-01T12:00:00Z """
        last_donation_received_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        next_occurrence: String
      

        """ example: [object Object] """
        schedule: String
      

        """ example: USD """
        amount_currency: String
      
    }

    type GivingRecurringDonation {
      id: ID!
      attributes: GivingRecurringDonationAttributes
      relationships: GivingRecurringDonationRelationships
    }
  

    enum GivingRecurringDonationDesignationOrderByEnum {
      id
amount_cents
amount_currency
    }

    input GivingRecurringDonationDesignationOrderInput {
      sort: sortEnum = asc
      field: GivingRecurringDonationDesignationOrderByEnum
    }

    
    
      type GivingRecurringDonationDesignationRelationships {
        GivingFund: [GivingFund]
      }
    

    type GivingRecurringDonationDesignationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        amount_cents: Int
      

        """ example: string """
        amount_currency: String
      
    }

    type GivingRecurringDonationDesignation {
      id: ID!
      attributes: GivingRecurringDonationDesignationAttributes
      relationships: GivingRecurringDonationDesignationRelationships
    }
  

    enum GivingRefundOrderByEnum {
      id
created_at
updated_at
amount_cents
amount_currency
fee_cents
refunded_at
fee_currency
    }

    input GivingRefundOrderInput {
      sort: sortEnum = asc
      field: GivingRefundOrderByEnum
    }

    
    
      type GivingRefundRelationships {
        GivingDesignation_refunds: [GivingDesignationRefund]
      }
    

    type GivingRefundAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 1 """
        amount_cents: Int
      

        """ example: string """
        amount_currency: String
      

        """ example: 1 """
        fee_cents: Int
      

        """ example: 2000-01-01T12:00:00Z """
        refunded_at: String
      

        """ example: USD """
        fee_currency: String
      
    }

    type GivingRefund {
      id: ID!
      attributes: GivingRefundAttributes
      relationships: GivingRefundRelationships
    }
  

    enum GroupsAttendanceOrderByEnum {
      id
attended
role
    }

    input GroupsAttendanceOrderInput {
      sort: sortEnum = asc
      field: GroupsAttendanceOrderByEnum
    }

    
      input GroupsAttendanceWhereAttributes {
        role: String
      }
    
    
      type GroupsAttendanceRelationships {
        GroupsPerson: [GroupsPerson]
      }
    

    type GroupsAttendanceAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        attended: Boolean
      

        """ example: value """
        role: String
      
    }

    type GroupsAttendance {
      id: ID!
      attributes: GroupsAttendanceAttributes
      relationships: GroupsAttendanceRelationships
    }
  

    enum GroupsEnrollmentOrderByEnum {
      id
auto_closed
auto_closed_reason
date_limit
date_limit_reached
member_limit
member_limit_reached
status
strategy
    }

    input GroupsEnrollmentOrderInput {
      sort: sortEnum = asc
      field: GroupsEnrollmentOrderByEnum
    }

    
    

    type GroupsEnrollmentAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        auto_closed: Boolean
      

        """ example: string """
        auto_closed_reason: String
      

        """ example: string """
        date_limit: String
      

        """ example: true """
        date_limit_reached: Boolean
      

        """ example: 1 """
        member_limit: Int
      

        """ example: true """
        member_limit_reached: Boolean
      

        """ example: string """
        status: String
      

        """ example: string """
        strategy: String
      
    }

    type GroupsEnrollment {
      id: ID!
      attributes: GroupsEnrollmentAttributes
      
    }
  

    enum GroupsEventOrderByEnum {
      id
attendance_requests_enabled
automated_reminder_enabled
canceled
canceled_at
description
ends_at
location_type_preference
multi_day
name
reminders_sent
reminders_sent_at
repeating
starts_at
virtual_location_url
visitors_count
    }

    input GroupsEventOrderInput {
      sort: sortEnum = asc
      field: GroupsEventOrderByEnum
    }

    
      input GroupsEventWhereAttributes {
        ends_at: String
name: String
starts_at: String
      }
    
    
      type GroupsEventRelationships {
        GroupsAttendances: [GroupsAttendance]
GroupsGroup: [GroupsGroup]
GroupsLocation: [GroupsLocation]
GroupsNotes: [GroupsEventNote]
      }
    

    type GroupsEventAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        attendance_requests_enabled: Boolean
      

        """ example: true """
        automated_reminder_enabled: Boolean
      

        """ example: true """
        canceled: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        canceled_at: String
      

        """ example: string """
        description: String
      

        """ example: 2000-01-01T12:00:00Z """
        ends_at: String
      

        """ example: string """
        location_type_preference: String
      

        """ example: true """
        multi_day: Boolean
      

        """ example: string """
        name: String
      

        """ example: true """
        reminders_sent: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        reminders_sent_at: String
      

        """ example: true """
        repeating: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      

        """ example: string """
        virtual_location_url: String
      

        """ example: 1 """
        visitors_count: Int
      
    }

    type GroupsEvent {
      id: ID!
      attributes: GroupsEventAttributes
      relationships: GroupsEventRelationships
    }
  

    enum GroupsEventNoteOrderByEnum {
      id
body
    }

    input GroupsEventNoteOrderInput {
      sort: sortEnum = asc
      field: GroupsEventNoteOrderByEnum
    }

    
    
      type GroupsEventNoteRelationships {
        GroupsOwner: [GroupsOwner]
      }
    

    type GroupsEventNoteAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        body: String
      
    }

    type GroupsEventNote {
      id: ID!
      attributes: GroupsEventNoteAttributes
      relationships: GroupsEventNoteRelationships
    }
  

    enum GroupsGroupOrderByEnum {
      id
archived_at
contact_email
created_at
description
events_visibility
header_image
location_type_preference
memberships_count
name
public_church_center_web_url
schedule
virtual_location_url
widget_status
    }

    input GroupsGroupOrderInput {
      sort: sortEnum = asc
      field: GroupsGroupOrderByEnum
    }

    
      input GroupsGroupWhereAttributes {
        archive_status: String
name: String
      }
    
    
      type GroupsGroupRelationships {
        GroupsApplications: [GroupsGroupApplication]
GroupsEnrollment: [GroupsEnrollment]
GroupsEvents: [GroupsEvent]
GroupsGroup_type: [GroupsGroupType]
GroupsLocation: [GroupsLocation]
GroupsMemberships: [GroupsMembership]
GroupsPeople: [GroupsPerson]
GroupsResources: [GroupsResource]
GroupsTags: [GroupsTag]
      }
    

    type GroupsGroupAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        archived_at: String
      

        """ example: string """
        contact_email: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        description: String
      

        """ example: value """
        events_visibility: String
      

        """ example: [object Object] """
        header_image: String
      

        """ example: value """
        location_type_preference: String
      

        """ example: 1 """
        memberships_count: Int
      

        """ example: string """
        name: String
      

        """ example: string """
        public_church_center_web_url: String
      

        """ example: string """
        schedule: String
      

        """ example: string """
        virtual_location_url: String
      

        """ example: [object Object] """
        widget_status: String
      
    }

    type GroupsGroup {
      id: ID!
      attributes: GroupsGroupAttributes
      relationships: GroupsGroupRelationships
    }
  

    enum GroupsGroupApplicationOrderByEnum {
      id
applied_at
message
status
    }

    input GroupsGroupApplicationOrderInput {
      sort: sortEnum = asc
      field: GroupsGroupApplicationOrderByEnum
    }

    
      input GroupsGroupApplicationWhereAttributes {
        applied_at: String
status: String
      }
    
    
      type GroupsGroupApplicationRelationships {
        GroupsGroup: [GroupsGroup]
GroupsPerson: [GroupsPerson]
      }
    

    type GroupsGroupApplicationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        applied_at: String
      

        """ example: string """
        message: String
      

        """ example: string """
        status: String
      
    }

    type GroupsGroupApplication {
      id: ID!
      attributes: GroupsGroupApplicationAttributes
      relationships: GroupsGroupApplicationRelationships
    }
  

    enum GroupsGroupTypeOrderByEnum {
      id
church_center_visible
church_center_map_visible
color
default_group_settings
description
name
position
    }

    input GroupsGroupTypeOrderInput {
      sort: sortEnum = asc
      field: GroupsGroupTypeOrderByEnum
    }

    
      input GroupsGroupTypeWhereAttributes {
        id: ID!
      }
    
    
      type GroupsGroupTypeRelationships {
        GroupsEvents: [GroupsEvent]
GroupsGroups: [GroupsGroup]
GroupsResources: [GroupsResource]
      }
    

    type GroupsGroupTypeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        church_center_visible: Boolean
      

        """ example: true """
        church_center_map_visible: Boolean
      

        """ example: string """
        color: String
      

        """ example: string """
        default_group_settings: String
      

        """ example: string """
        description: String
      

        """ example: string """
        name: String
      

        """ example: 1 """
        position: Int
      
    }

    type GroupsGroupType {
      id: ID!
      attributes: GroupsGroupTypeAttributes
      relationships: GroupsGroupTypeRelationships
    }
  

    enum GroupsLocationOrderByEnum {
      id
display_preference
full_formatted_address
latitude
longitude
name
radius
strategy
    }

    input GroupsLocationOrderInput {
      sort: sortEnum = asc
      field: GroupsLocationOrderByEnum
    }

    
    
      type GroupsLocationRelationships {
        GroupsGroup: [GroupsGroup]
      }
    

    type GroupsLocationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: value """
        display_preference: String
      

        """ example: string """
        full_formatted_address: String
      

        """ example: 1.42 """
        latitude: Int
      

        """ example: 1.42 """
        longitude: Int
      

        """ example: string """
        name: String
      

        """ example: string """
        radius: String
      

        """ example: string """
        strategy: String
      
    }

    type GroupsLocation {
      id: ID!
      attributes: GroupsLocationAttributes
      relationships: GroupsLocationRelationships
    }
  

    enum GroupsMembershipOrderByEnum {
      id
joined_at
role
    }

    input GroupsMembershipOrderInput {
      sort: sortEnum = asc
      field: GroupsMembershipOrderByEnum
    }

    
      input GroupsMembershipWhereAttributes {
        role: String
      }
    
    
      type GroupsMembershipRelationships {
        GroupsGroup: [GroupsGroup]
GroupsPerson: [GroupsPerson]
      }
    

    type GroupsMembershipAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        joined_at: String
      

        """ example: string """
        role: String
      
    }

    type GroupsMembership {
      id: ID!
      attributes: GroupsMembershipAttributes
      relationships: GroupsMembershipRelationships
    }
  

    enum GroupsOrganizationOrderByEnum {
      id
name
time_zone
    }

    input GroupsOrganizationOrderInput {
      sort: sortEnum = asc
      field: GroupsOrganizationOrderByEnum
    }

    
    
      type GroupsOrganizationRelationships {
        GroupsEvents: [GroupsEvent]
GroupsGroup_applications: [GroupsGroupApplication]
GroupsGroup_types: [GroupsGroupType]
GroupsGroups: [GroupsGroup]
GroupsPeople: [GroupsPerson]
GroupsTag_groups: [GroupsTagGroup]
      }
    

    type GroupsOrganizationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        time_zone: String
      
    }

    type GroupsOrganization {
      id: ID!
      attributes: GroupsOrganizationAttributes
      relationships: GroupsOrganizationRelationships
    }
  

    enum GroupsOwnerOrderByEnum {
      id
avatar_url
first_name
last_name
    }

    input GroupsOwnerOrderInput {
      sort: sortEnum = asc
      field: GroupsOwnerOrderByEnum
    }

    
    

    type GroupsOwnerAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        avatar_url: String
      

        """ example: string """
        first_name: String
      

        """ example: string """
        last_name: String
      
    }

    type GroupsOwner {
      id: ID!
      attributes: GroupsOwnerAttributes
      
    }
  

    enum GroupsPersonOrderByEnum {
      id
addresses
avatar_url
created_at
email_addresses
first_name
last_name
permissions
phone_numbers
    }

    input GroupsPersonOrderInput {
      sort: sortEnum = asc
      field: GroupsPersonOrderByEnum
    }

    
      input GroupsPersonWhereAttributes {
        first_name: String
last_name: String
      }
    
    
      type GroupsPersonRelationships {
        GroupsEvents: [GroupsEvent]
GroupsGroups: [GroupsGroup]
GroupsMemberships: [GroupsMembership]
      }
    

    type GroupsPersonAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example:  """
        addresses: String
      

        """ example: string """
        avatar_url: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example:  """
        email_addresses: String
      

        """ example: string """
        first_name: String
      

        """ example: string """
        last_name: String
      

        """ example: string """
        permissions: String
      

        """ example:  """
        phone_numbers: String
      
    }

    type GroupsPerson {
      id: ID!
      attributes: GroupsPersonAttributes
      relationships: GroupsPersonRelationships
    }
  

    enum GroupsResourceOrderByEnum {
      id
description
last_updated
name
type
visibility
    }

    input GroupsResourceOrderInput {
      sort: sortEnum = asc
      field: GroupsResourceOrderByEnum
    }

    
    
      type GroupsResourceRelationships {
        GroupsDownload: [GroupsResource]
GroupsVisit: [GroupsResource]
      }
    

    type GroupsResourceAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        description: String
      

        """ example: 2000-01-01T12:00:00Z """
        last_updated: String
      

        """ example: string """
        name: String
      

        """ example: string """
        type: String
      

        """ example: value """
        visibility: String
      
    }

    type GroupsResource {
      id: ID!
      attributes: GroupsResourceAttributes
      relationships: GroupsResourceRelationships
    }
  

    enum GroupsTagOrderByEnum {
      id
name
position
    }

    input GroupsTagOrderInput {
      sort: sortEnum = asc
      field: GroupsTagOrderByEnum
    }

    
      input GroupsTagWhereAttributes {
        id: ID!
name: String
      }
    
    
      type GroupsTagRelationships {
        GroupsGroups: [GroupsGroup]
      }
    

    type GroupsTagAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: 1 """
        position: Int
      
    }

    type GroupsTag {
      id: ID!
      attributes: GroupsTagAttributes
      relationships: GroupsTagRelationships
    }
  

    enum GroupsTagGroupOrderByEnum {
      id
display_publicly
multiple_options_enabled
name
position
    }

    input GroupsTagGroupOrderInput {
      sort: sortEnum = asc
      field: GroupsTagGroupOrderByEnum
    }

    
      input GroupsTagGroupWhereAttributes {
        name: String
      }
    
    
      type GroupsTagGroupRelationships {
        GroupsTags: [GroupsTag]
      }
    

    type GroupsTagGroupAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        display_publicly: Boolean
      

        """ example: true """
        multiple_options_enabled: Boolean
      

        """ example: string """
        name: String
      

        """ example: 1 """
        position: Int
      
    }

    type GroupsTagGroup {
      id: ID!
      attributes: GroupsTagGroupAttributes
      relationships: GroupsTagGroupRelationships
    }
  

    enum PeopleAddressOrderByEnum {
      id
city
state
zip
country_code
location
primary
street_line_1
street_line_2
created_at
updated_at
country_name
    }

    input PeopleAddressOrderInput {
      sort: sortEnum = asc
      field: PeopleAddressOrderByEnum
    }

    
      input PeopleAddressWhereAttributes {
        city: String
country_code: String
location: String
primary: Boolean
state: String
street_line_1: String
street_line_2: String
zip: String
      }
    
    

    type PeopleAddressAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        city: String
      

        """ example: string """
        state: String
      

        """ example: string """
        zip: String
      

        """ example: string """
        country_code: String
      

        """ example: string """
        location: String
      

        """ example: true """
        primary: Boolean
      

        """ example: string """
        street_line_1: String
      

        """ example: string """
        street_line_2: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        country_name: String
      
    }

    type PeopleAddress {
      id: ID!
      attributes: PeopleAddressAttributes
      
    }
  

    enum PeopleAnniversaryCouplesOrderByEnum {
      id
    }

    input PeopleAnniversaryCouplesOrderInput {
      sort: sortEnum = asc
      field: PeopleAnniversaryCouplesOrderByEnum
    }

    
    

    type PeopleAnniversaryCouplesAttributes {
      
        """ example: primary_key """
        id: ID!
      
    }

    type PeopleAnniversaryCouples {
      id: ID!
      attributes: PeopleAnniversaryCouplesAttributes
      
    }
  

    enum PeopleAppOrderByEnum {
      id
name
url
    }

    input PeopleAppOrderInput {
      sort: sortEnum = asc
      field: PeopleAppOrderByEnum
    }

    
      input PeopleAppWhereAttributes {
        name: String
url: String
      }
    
    

    type PeopleAppAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        url: String
      
    }

    type PeopleApp {
      id: ID!
      attributes: PeopleAppAttributes
      
    }
  

    enum PeopleBackgroundCheckOrderByEnum {
      id
current
note
status_updated_at
report_url
expires_on
status
result
completed_at
    }

    input PeopleBackgroundCheckOrderInput {
      sort: sortEnum = asc
      field: PeopleBackgroundCheckOrderByEnum
    }

    
    
      type PeopleBackgroundCheckRelationships {
        PeoplePerson: [PeoplePerson]
      }
    

    type PeopleBackgroundCheckAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        current: Boolean
      

        """ example: string """
        note: String
      

        """ example: 2000-01-01T12:00:00Z """
        status_updated_at: String
      

        """ example: string """
        report_url: String
      

        """ example: 2000-01-01 """
        expires_on: String
      

        """ example: string """
        status: String
      

        """ example: string """
        result: String
      

        """ example: 2000-01-01T12:00:00Z """
        completed_at: String
      
    }

    type PeopleBackgroundCheck {
      id: ID!
      attributes: PeopleBackgroundCheckAttributes
      relationships: PeopleBackgroundCheckRelationships
    }
  

    enum PeopleBirthdayPeopleOrderByEnum {
      id
    }

    input PeopleBirthdayPeopleOrderInput {
      sort: sortEnum = asc
      field: PeopleBirthdayPeopleOrderByEnum
    }

    
    

    type PeopleBirthdayPeopleAttributes {
      
        """ example: primary_key """
        id: ID!
      
    }

    type PeopleBirthdayPeople {
      id: ID!
      attributes: PeopleBirthdayPeopleAttributes
      
    }
  

    enum PeopleCampusOrderByEnum {
      id
latitude
longitude
description
street
city
state
zip
country
phone_number
website
twenty_four_hour_time
date_format
church_center_enabled
contact_email_address
time_zone
geolocation_set_manually
time_zone_raw
name
created_at
updated_at
avatar_url
    }

    input PeopleCampusOrderInput {
      sort: sortEnum = asc
      field: PeopleCampusOrderByEnum
    }

    
      input PeopleCampusWhereAttributes {
        created_at: String
id: ID!
updated_at: String
      }
    
    
      type PeopleCampusRelationships {
        PeopleLists: [PeopleList]
PeopleService_times: [PeopleServiceTime]
      }
    

    type PeopleCampusAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1.42 """
        latitude: Int
      

        """ example: 1.42 """
        longitude: Int
      

        """ example: string """
        description: String
      

        """ example: string """
        street: String
      

        """ example: string """
        city: String
      

        """ example: string """
        state: String
      

        """ example: string """
        zip: String
      

        """ example: string """
        country: String
      

        """ example: string """
        phone_number: String
      

        """ example: string """
        website: String
      

        """ example: true """
        twenty_four_hour_time: Boolean
      

        """ example: 1 """
        date_format: Int
      

        """ example: true """
        church_center_enabled: Boolean
      

        """ example: string """
        contact_email_address: String
      

        """ example: string """
        time_zone: String
      

        """ example: true """
        geolocation_set_manually: Boolean
      

        """ example: string """
        time_zone_raw: String
      

        """ example: string """
        name: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        avatar_url: String
      
    }

    type PeopleCampus {
      id: ID!
      attributes: PeopleCampusAttributes
      relationships: PeopleCampusRelationships
    }
  

    enum PeopleCarrierOrderByEnum {
      id
value
name
international
    }

    input PeopleCarrierOrderInput {
      sort: sortEnum = asc
      field: PeopleCarrierOrderByEnum
    }

    
    

    type PeopleCarrierAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        value: String
      

        """ example: string """
        name: String
      

        """ example: true """
        international: Boolean
      
    }

    type PeopleCarrier {
      id: ID!
      attributes: PeopleCarrierAttributes
      
    }
  

    enum PeopleConditionOrderByEnum {
      id
application
definition_class
comparison
settings
definition_identifier
description
created_at
updated_at
    }

    input PeopleConditionOrderInput {
      sort: sortEnum = asc
      field: PeopleConditionOrderByEnum
    }

    
      input PeopleConditionWhereAttributes {
        application: String
comparison: String
created_at: String
definition_class: String
definition_identifier: String
description: String
settings: String
updated_at: String
      }
    
    
      type PeopleConditionRelationships {
        PeopleCreated_by: [PeoplePerson]
      }
    

    type PeopleConditionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        application: String
      

        """ example: string """
        definition_class: String
      

        """ example: string """
        comparison: String
      

        """ example: string """
        settings: String
      

        """ example: string """
        definition_identifier: String
      

        """ example: string """
        description: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type PeopleCondition {
      id: ID!
      attributes: PeopleConditionAttributes
      relationships: PeopleConditionRelationships
    }
  

    enum PeopleConnectedPersonOrderByEnum {
      id
given_name
first_name
nickname
middle_name
last_name
gender
organization_name
organization_id
    }

    input PeopleConnectedPersonOrderInput {
      sort: sortEnum = asc
      field: PeopleConnectedPersonOrderByEnum
    }

    
    

    type PeopleConnectedPersonAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        given_name: String
      

        """ example: string """
        first_name: String
      

        """ example: string """
        nickname: String
      

        """ example: string """
        middle_name: String
      

        """ example: string """
        last_name: String
      

        """ example: string """
        gender: String
      

        """ example: string """
        organization_name: String
      

        """ example: primary_key """
        organization_id: ID!
      
    }

    type PeopleConnectedPerson {
      id: ID!
      attributes: PeopleConnectedPersonAttributes
      
    }
  

    enum PeopleEmailOrderByEnum {
      id
address
location
primary
created_at
updated_at
blocked
    }

    input PeopleEmailOrderInput {
      sort: sortEnum = asc
      field: PeopleEmailOrderByEnum
    }

    
      input PeopleEmailWhereAttributes {
        address: String
blocked: Boolean
created_at: String
location: String
primary: Boolean
updated_at: String
      }
    
    
      type PeopleEmailRelationships {
        PeoplePerson: [PeoplePerson]
      }
    

    type PeopleEmailAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        address: String
      

        """ example: string """
        location: String
      

        """ example: true """
        primary: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: true """
        blocked: Boolean
      
    }

    type PeopleEmail {
      id: ID!
      attributes: PeopleEmailAttributes
      relationships: PeopleEmailRelationships
    }
  

    enum PeopleFieldDatumOrderByEnum {
      id
value
file
file_size
file_content_type
file_name
    }

    input PeopleFieldDatumOrderInput {
      sort: sortEnum = asc
      field: PeopleFieldDatumOrderByEnum
    }

    
      input PeopleFieldDatumWhereAttributes {
        file: String
file_content_type: String
file_name: String
file_size: Int
value: String
      }
    
    
      type PeopleFieldDatumRelationships {
        PeopleField_definition: [PeopleFieldDefinition]
PeopleField_option: [PeopleFieldOption]
PeoplePerson: [PeoplePerson]
PeopleTab: [PeopleTab]
      }
    

    type PeopleFieldDatumAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        value: String
      

        """ example: string """
        file: String
      

        """ example: 1 """
        file_size: Int
      

        """ example: string """
        file_content_type: String
      

        """ example: string """
        file_name: String
      
    }

    type PeopleFieldDatum {
      id: ID!
      attributes: PeopleFieldDatumAttributes
      relationships: PeopleFieldDatumRelationships
    }
  

    enum PeopleFieldDefinitionOrderByEnum {
      id
data_type
name
sequence
slug
config
deleted_at
tab_id
    }

    input PeopleFieldDefinitionOrderInput {
      sort: sortEnum = asc
      field: PeopleFieldDefinitionOrderByEnum
    }

    
      input PeopleFieldDefinitionWhereAttributes {
        config: String
data_type: String
deleted_at: String
name: String
sequence: Int
slug: String
tab_id: ID!
      }
    
    
      type PeopleFieldDefinitionRelationships {
        PeopleField_options: [PeopleFieldOption]
PeopleTab: [PeopleTab]
      }
    

    type PeopleFieldDefinitionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        data_type: String
      

        """ example: string """
        name: String
      

        """ example: 1 """
        sequence: Int
      

        """ example: string """
        slug: String
      

        """ example: string """
        config: String
      

        """ example: 2000-01-01T12:00:00Z """
        deleted_at: String
      

        """ example: primary_key """
        tab_id: ID!
      
    }

    type PeopleFieldDefinition {
      id: ID!
      attributes: PeopleFieldDefinitionAttributes
      relationships: PeopleFieldDefinitionRelationships
    }
  

    enum PeopleFieldOptionOrderByEnum {
      id
value
sequence
    }

    input PeopleFieldOptionOrderInput {
      sort: sortEnum = asc
      field: PeopleFieldOptionOrderByEnum
    }

    
      input PeopleFieldOptionWhereAttributes {
        sequence: Int
value: String
      }
    
    

    type PeopleFieldOptionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        value: String
      

        """ example: 1 """
        sequence: Int
      
    }

    type PeopleFieldOption {
      id: ID!
      attributes: PeopleFieldOptionAttributes
      
    }
  

    enum PeopleFormOrderByEnum {
      id
name
description
active
archived_at
created_at
updated_at
deleted_at
submission_count
public_url
recently_viewed
archived
send_submission_notification_to_submitter
    }

    input PeopleFormOrderInput {
      sort: sortEnum = asc
      field: PeopleFormOrderByEnum
    }

    
      input PeopleFormWhereAttributes {
        active: Boolean
id: ID!
      }
    
    
      type PeopleFormRelationships {
        PeopleCampus: [PeopleCampus]
PeopleFields: [PeopleFormField]
PeopleForm_submissions: [PeopleFormSubmission]
      }
    

    type PeopleFormAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        description: String
      

        """ example: true """
        active: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        archived_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        deleted_at: String
      

        """ example: 1 """
        submission_count: Int
      

        """ example: string """
        public_url: String
      

        """ example: true """
        recently_viewed: Boolean
      

        """ example: true """
        archived: Boolean
      

        """ example: true """
        send_submission_notification_to_submitter: Boolean
      
    }

    type PeopleForm {
      id: ID!
      attributes: PeopleFormAttributes
      relationships: PeopleFormRelationships
    }
  

    enum PeopleFormFieldOrderByEnum {
      id
label
description
required
settings
field_type
sequence
created_at
updated_at
    }

    input PeopleFormFieldOrderInput {
      sort: sortEnum = asc
      field: PeopleFormFieldOrderByEnum
    }

    
    
      type PeopleFormFieldRelationships {
        PeopleOptions: [PeopleFormFieldOption]
      }
    

    type PeopleFormFieldAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        label: String
      

        """ example: string """
        description: String
      

        """ example: true """
        required: Boolean
      

        """ example: string """
        settings: String
      

        """ example: value """
        field_type: String
      

        """ example: 1 """
        sequence: Int
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type PeopleFormField {
      id: ID!
      attributes: PeopleFormFieldAttributes
      relationships: PeopleFormFieldRelationships
    }
  

    enum PeopleFormFieldOptionOrderByEnum {
      id
label
sequence
created_at
updated_at
    }

    input PeopleFormFieldOptionOrderInput {
      sort: sortEnum = asc
      field: PeopleFormFieldOptionOrderByEnum
    }

    
    

    type PeopleFormFieldOptionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        label: String
      

        """ example: 1 """
        sequence: Int
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type PeopleFormFieldOption {
      id: ID!
      attributes: PeopleFormFieldOptionAttributes
      
    }
  

    enum PeopleFormSubmissionOrderByEnum {
      id
verified
requires_verification
created_at
    }

    input PeopleFormSubmissionOrderInput {
      sort: sortEnum = asc
      field: PeopleFormSubmissionOrderByEnum
    }

    
    
      type PeopleFormSubmissionRelationships {
        PeopleForm: [PeopleForm]
PeopleForm_fields: [PeopleFormField]
PeopleForm_submission_values: [PeopleFormSubmissionValue]
PeoplePerson: [PeoplePerson]
      }
    

    type PeopleFormSubmissionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        verified: Boolean
      

        """ example: true """
        requires_verification: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      
    }

    type PeopleFormSubmission {
      id: ID!
      attributes: PeopleFormSubmissionAttributes
      relationships: PeopleFormSubmissionRelationships
    }
  

    enum PeopleFormSubmissionValueOrderByEnum {
      id
display_value
attachments
    }

    input PeopleFormSubmissionValueOrderInput {
      sort: sortEnum = asc
      field: PeopleFormSubmissionValueOrderByEnum
    }

    
    

    type PeopleFormSubmissionValueAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        display_value: String
      

        """ example:  """
        attachments: String
      
    }

    type PeopleFormSubmissionValue {
      id: ID!
      attributes: PeopleFormSubmissionValueAttributes
      
    }
  

    enum PeopleHouseholdOrderByEnum {
      id
name
member_count
primary_contact_name
created_at
updated_at
avatar
primary_contact_id
    }

    input PeopleHouseholdOrderInput {
      sort: sortEnum = asc
      field: PeopleHouseholdOrderByEnum
    }

    
      input PeopleHouseholdWhereAttributes {
        created_at: String
member_count: Int
name: String
primary_contact_name: String
updated_at: String
      }
    
    
      type PeopleHouseholdRelationships {
        PeopleHousehold_memberships: [PeopleHouseholdMembership]
PeoplePeople: [PeoplePerson]
      }
    

    type PeopleHouseholdAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: 1 """
        member_count: Int
      

        """ example: string """
        primary_contact_name: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        avatar: String
      

        """ example: primary_key """
        primary_contact_id: ID!
      
    }

    type PeopleHousehold {
      id: ID!
      attributes: PeopleHouseholdAttributes
      relationships: PeopleHouseholdRelationships
    }
  

    enum PeopleHouseholdMembershipOrderByEnum {
      id
person_name
pending
    }

    input PeopleHouseholdMembershipOrderInput {
      sort: sortEnum = asc
      field: PeopleHouseholdMembershipOrderByEnum
    }

    
      input PeopleHouseholdMembershipWhereAttributes {
        pending: Boolean
person_name: String
      }
    
    
      type PeopleHouseholdMembershipRelationships {
        PeopleHousehold: [PeopleHousehold]
PeoplePerson: [PeoplePerson]
      }
    

    type PeopleHouseholdMembershipAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        person_name: String
      

        """ example: true """
        pending: Boolean
      
    }

    type PeopleHouseholdMembership {
      id: ID!
      attributes: PeopleHouseholdMembershipAttributes
      relationships: PeopleHouseholdMembershipRelationships
    }
  

    enum PeopleInactiveReasonOrderByEnum {
      id
value
    }

    input PeopleInactiveReasonOrderInput {
      sort: sortEnum = asc
      field: PeopleInactiveReasonOrderByEnum
    }

    
      input PeopleInactiveReasonWhereAttributes {
        value: String
      }
    
    

    type PeopleInactiveReasonAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        value: String
      
    }

    type PeopleInactiveReason {
      id: ID!
      attributes: PeopleInactiveReasonAttributes
      
    }
  

    enum PeopleJoltTokenOrderByEnum {
      id
    }

    input PeopleJoltTokenOrderInput {
      sort: sortEnum = asc
      field: PeopleJoltTokenOrderByEnum
    }

    
    

    type PeopleJoltTokenAttributes {
      
        """ example: primary_key """
        id: ID!
      
    }

    type PeopleJoltToken {
      id: ID!
      attributes: PeopleJoltTokenAttributes
      
    }
  

    enum PeopleListOrderByEnum {
      id
name
auto_refresh
status
has_inactive_results
include_inactive
returns
return_original_if_none
subset
automations_active
automations_count
paused_automations_count
description
invalid
auto_refresh_frequency
name_or_description
recently_viewed
refreshed_at
starred
total_people
batch_completed_at
created_at
updated_at
    }

    input PeopleListOrderInput {
      sort: sortEnum = asc
      field: PeopleListOrderByEnum
    }

    
      input PeopleListWhereAttributes {
        batch_completed_at: String
created_at: String
id: ID!
name: String
updated_at: String
      }
    
    
      type PeopleListRelationships {
        PeopleCampus: [PeopleCampus]
PeopleCategory: [PeopleListCategory]
PeopleCreated_by: [PeoplePerson]
PeopleList_results: [PeopleListResult]
PeopleMailchimp_sync_status: [PeopleMailchimpSyncStatus]
PeoplePeople: [PeoplePerson]
PeopleRules: [PeopleRule]
PeopleShares: [PeopleListShare]
PeopleStar: [PeopleListStar]
PeopleUpdated_by: [PeoplePerson]
      }
    

    type PeopleListAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: true """
        auto_refresh: Boolean
      

        """ example: string """
        status: String
      

        """ example: true """
        has_inactive_results: Boolean
      

        """ example: true """
        include_inactive: Boolean
      

        """ example: string """
        returns: String
      

        """ example: true """
        return_original_if_none: Boolean
      

        """ example: string """
        subset: String
      

        """ example: true """
        automations_active: Boolean
      

        """ example: 1 """
        automations_count: Int
      

        """ example: 1 """
        paused_automations_count: Int
      

        """ example: string """
        description: String
      

        """ example: true """
        invalid: Boolean
      

        """ example: string """
        auto_refresh_frequency: String
      

        """ example: string """
        name_or_description: String
      

        """ example: true """
        recently_viewed: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        refreshed_at: String
      

        """ example: true """
        starred: Boolean
      

        """ example: 1 """
        total_people: Int
      

        """ example: 2000-01-01T12:00:00Z """
        batch_completed_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type PeopleList {
      id: ID!
      attributes: PeopleListAttributes
      relationships: PeopleListRelationships
    }
  

    enum PeopleListCategoryOrderByEnum {
      id
name
created_at
updated_at
organization_id
    }

    input PeopleListCategoryOrderInput {
      sort: sortEnum = asc
      field: PeopleListCategoryOrderByEnum
    }

    
      input PeopleListCategoryWhereAttributes {
        created_at: String
name: String
organization_id: ID!
updated_at: String
      }
    
    
      type PeopleListCategoryRelationships {
        PeopleLists: [PeopleList]
      }
    

    type PeopleListCategoryAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: primary_key """
        organization_id: ID!
      
    }

    type PeopleListCategory {
      id: ID!
      attributes: PeopleListCategoryAttributes
      relationships: PeopleListCategoryRelationships
    }
  

    enum PeopleListResultOrderByEnum {
      id
created_at
updated_at
    }

    input PeopleListResultOrderInput {
      sort: sortEnum = asc
      field: PeopleListResultOrderByEnum
    }

    
    

    type PeopleListResultAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type PeopleListResult {
      id: ID!
      attributes: PeopleListResultAttributes
      
    }
  

    enum PeopleListShareOrderByEnum {
      id
permission
group
created_at
name
    }

    input PeopleListShareOrderInput {
      sort: sortEnum = asc
      field: PeopleListShareOrderByEnum
    }

    
      input PeopleListShareWhereAttributes {
        created_at: String
group: String
name: String
permission: String
      }
    
    
      type PeopleListShareRelationships {
        PeoplePerson: [PeoplePerson]
      }
    

    type PeopleListShareAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: value """
        permission: String
      

        """ example: value """
        group: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        name: String
      
    }

    type PeopleListShare {
      id: ID!
      attributes: PeopleListShareAttributes
      relationships: PeopleListShareRelationships
    }
  

    enum PeopleListStarOrderByEnum {
      id
created_at
    }

    input PeopleListStarOrderInput {
      sort: sortEnum = asc
      field: PeopleListStarOrderByEnum
    }

    
    

    type PeopleListStarAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      
    }

    type PeopleListStar {
      id: ID!
      attributes: PeopleListStarAttributes
      
    }
  

    enum PeopleMailchimpSyncStatusOrderByEnum {
      id
status
error
progress
completed_at
segment_id
    }

    input PeopleMailchimpSyncStatusOrderInput {
      sort: sortEnum = asc
      field: PeopleMailchimpSyncStatusOrderByEnum
    }

    
    

    type PeopleMailchimpSyncStatusAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        status: String
      

        """ example: string """
        error: String
      

        """ example: 1 """
        progress: Int
      

        """ example: 2000-01-01T12:00:00Z """
        completed_at: String
      

        """ example: 1 """
        segment_id: Int
      
    }

    type PeopleMailchimpSyncStatus {
      id: ID!
      attributes: PeopleMailchimpSyncStatusAttributes
      
    }
  

    enum PeopleMaritalStatusOrderByEnum {
      id
value
    }

    input PeopleMaritalStatusOrderInput {
      sort: sortEnum = asc
      field: PeopleMaritalStatusOrderByEnum
    }

    
      input PeopleMaritalStatusWhereAttributes {
        value: String
      }
    
    

    type PeopleMaritalStatusAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        value: String
      
    }

    type PeopleMaritalStatus {
      id: ID!
      attributes: PeopleMaritalStatusAttributes
      
    }
  

    enum PeopleMessageOrderByEnum {
      id
kind
to_addresses
subject
file
delivery_status
reject_reason
created_at
sent_at
bounced_at
rejection_notification_sent_at
from_name
from_address
read_at
app_name
message_type
    }

    input PeopleMessageOrderInput {
      sort: sortEnum = asc
      field: PeopleMessageOrderByEnum
    }

    
      input PeopleMessageWhereAttributes {
        app_name: String
bounced_at: String
created_at: String
delivery_status: String
file: String
from_address: String
kind: String
reject_reason: String
rejection_notification_sent_at: String
sent_at: String
subject: String
to_addresses: String
      }
    
    
      type PeopleMessageRelationships {
        PeopleMessage_group: [PeopleMessageGroup]
PeopleTo: [PeoplePerson]
      }
    

    type PeopleMessageAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: value """
        kind: String
      

        """ example: string """
        to_addresses: String
      

        """ example: string """
        subject: String
      

        """ example: string """
        file: String
      

        """ example: string """
        delivery_status: String
      

        """ example: string """
        reject_reason: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        sent_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        bounced_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        rejection_notification_sent_at: String
      

        """ example: string """
        from_name: String
      

        """ example: string """
        from_address: String
      

        """ example: 2000-01-01T12:00:00Z """
        read_at: String
      

        """ example: string """
        app_name: String
      

        """ example: string """
        message_type: String
      
    }

    type PeopleMessage {
      id: ID!
      attributes: PeopleMessageAttributes
      relationships: PeopleMessageRelationships
    }
  

    enum PeopleMessageGroupOrderByEnum {
      id
uuid
message_type
from_address
subject
message_count
system_message
created_at
    }

    input PeopleMessageGroupOrderInput {
      sort: sortEnum = asc
      field: PeopleMessageGroupOrderByEnum
    }

    
      input PeopleMessageGroupWhereAttributes {
        created_at: String
from_address: String
message_count: Int
message_type: String
subject: String
system_message: Boolean
uuid: String
      }
    
    
      type PeopleMessageGroupRelationships {
        PeopleApp: [PeopleApp]
PeopleFrom: [PeoplePerson]
PeopleMessages: [PeopleMessage]
      }
    

    type PeopleMessageGroupAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        uuid: String
      

        """ example: string """
        message_type: String
      

        """ example: string """
        from_address: String
      

        """ example: string """
        subject: String
      

        """ example: 1 """
        message_count: Int
      

        """ example: true """
        system_message: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      
    }

    type PeopleMessageGroup {
      id: ID!
      attributes: PeopleMessageGroupAttributes
      relationships: PeopleMessageGroupRelationships
    }
  

    enum PeopleNamePrefixOrderByEnum {
      id
value
    }

    input PeopleNamePrefixOrderInput {
      sort: sortEnum = asc
      field: PeopleNamePrefixOrderByEnum
    }

    
      input PeopleNamePrefixWhereAttributes {
        value: String
      }
    
    

    type PeopleNamePrefixAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        value: String
      
    }

    type PeopleNamePrefix {
      id: ID!
      attributes: PeopleNamePrefixAttributes
      
    }
  

    enum PeopleNameSuffixOrderByEnum {
      id
value
    }

    input PeopleNameSuffixOrderInput {
      sort: sortEnum = asc
      field: PeopleNameSuffixOrderByEnum
    }

    
      input PeopleNameSuffixWhereAttributes {
        value: String
      }
    
    

    type PeopleNameSuffixAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        value: String
      
    }

    type PeopleNameSuffix {
      id: ID!
      attributes: PeopleNameSuffixAttributes
      
    }
  

    enum PeopleNoteOrderByEnum {
      id
note
created_at
updated_at
display_date
note_category_id
organization_id
person_id
created_by_id
    }

    input PeopleNoteOrderInput {
      sort: sortEnum = asc
      field: PeopleNoteOrderByEnum
    }

    
      input PeopleNoteWhereAttributes {
        note: String
note_category_id: ID!
      }
    
    
      type PeopleNoteRelationships {
        PeopleCategory: [PeopleNoteCategory]
PeopleCreated_by: [PeoplePerson]
PeoplePerson: [PeoplePerson]
      }
    

    type PeopleNoteAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        note: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        display_date: String
      

        """ example: primary_key """
        note_category_id: ID!
      

        """ example: primary_key """
        organization_id: ID!
      

        """ example: primary_key """
        person_id: ID!
      

        """ example: primary_key """
        created_by_id: ID!
      
    }

    type PeopleNote {
      id: ID!
      attributes: PeopleNoteAttributes
      relationships: PeopleNoteRelationships
    }
  

    enum PeopleNoteCategoryOrderByEnum {
      id
name
locked
created_at
updated_at
organization_id
    }

    input PeopleNoteCategoryOrderInput {
      sort: sortEnum = asc
      field: PeopleNoteCategoryOrderByEnum
    }

    
      input PeopleNoteCategoryWhereAttributes {
        created_at: String
locked: Boolean
name: String
organization_id: ID!
updated_at: String
      }
    
    
      type PeopleNoteCategoryRelationships {
        PeopleShares: [PeopleNoteCategoryShare]
PeopleSubscribers: [PeoplePerson]
PeopleSubscriptions: [PeopleNoteCategorySubscription]
      }
    

    type PeopleNoteCategoryAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: true """
        locked: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: primary_key """
        organization_id: ID!
      
    }

    type PeopleNoteCategory {
      id: ID!
      attributes: PeopleNoteCategoryAttributes
      relationships: PeopleNoteCategoryRelationships
    }
  

    enum PeopleNoteCategoryShareOrderByEnum {
      id
group
permission
person_id
    }

    input PeopleNoteCategoryShareOrderInput {
      sort: sortEnum = asc
      field: PeopleNoteCategoryShareOrderByEnum
    }

    
      input PeopleNoteCategoryShareWhereAttributes {
        permission: String
      }
    
    
      type PeopleNoteCategoryShareRelationships {
        PeoplePerson: [PeoplePerson]
      }
    

    type PeopleNoteCategoryShareAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: value """
        group: String
      

        """ example: value """
        permission: String
      

        """ example: primary_key """
        person_id: ID!
      
    }

    type PeopleNoteCategoryShare {
      id: ID!
      attributes: PeopleNoteCategoryShareAttributes
      relationships: PeopleNoteCategoryShareRelationships
    }
  

    enum PeopleNoteCategorySubscriptionOrderByEnum {
      id
created_at
updated_at
    }

    input PeopleNoteCategorySubscriptionOrderInput {
      sort: sortEnum = asc
      field: PeopleNoteCategorySubscriptionOrderByEnum
    }

    
      input PeopleNoteCategorySubscriptionWhereAttributes {
        created_at: String
updated_at: String
      }
    
    

    type PeopleNoteCategorySubscriptionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type PeopleNoteCategorySubscription {
      id: ID!
      attributes: PeopleNoteCategorySubscriptionAttributes
      
    }
  

    enum PeopleOrganizationOrderByEnum {
      id
name
country_code
date_format
time_zone
contact_website
created_at
avatar_url
    }

    input PeopleOrganizationOrderInput {
      sort: sortEnum = asc
      field: PeopleOrganizationOrderByEnum
    }

    
    
      type PeopleOrganizationRelationships {
        PeopleAddresses: [PeopleAddress]
PeopleAnniversary_couples: [PeopleAnniversaryCouples]
PeopleApps: [PeopleApp]
PeopleBackground_checks: [PeopleBackgroundCheck]
PeopleBirthday_people: [PeopleBirthdayPeople]
PeopleCampuses: [PeopleCampus]
PeopleCarriers: [PeopleCarrier]
PeopleEmails: [PeopleEmail]
PeopleField_data: [PeopleFieldDatum]
PeopleField_definitions: [PeopleFieldDefinition]
PeopleForms: [PeopleForm]
PeopleHouseholds: [PeopleHousehold]
PeopleInactive_reasons: [PeopleInactiveReason]
PeopleList_categories: [PeopleListCategory]
PeopleLists: [PeopleList]
PeopleMarital_statuses: [PeopleMaritalStatus]
PeopleMessage_groups: [PeopleMessageGroup]
PeopleMessages: [PeopleMessage]
PeopleName_prefixes: [PeopleNamePrefix]
PeopleName_suffixes: [PeopleNameSuffix]
PeopleNote_categories: [PeopleNoteCategory]
PeopleNote_category_subscriptions: [PeopleNoteCategorySubscription]
PeopleNotes: [PeopleNote]
PeoplePeople: [PeoplePerson]
PeoplePeople_imports: [PeoplePeopleImport]
PeoplePerson_mergers: [PeoplePersonMerger]
PeoplePhone_numbers: [PeoplePhoneNumber]
PeopleReports: [PeopleReport]
PeopleSchool_options: [PeopleSchoolOption]
PeopleSocial_profiles: [PeopleSocialProfile]
PeopleStats: [PeopleOrganizationStatistics]
PeopleTabs: [PeopleTab]
PeopleWorkflows: [PeopleWorkflow]
      }
    

    type PeopleOrganizationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        country_code: String
      

        """ example: 1 """
        date_format: Int
      

        """ example: string """
        time_zone: String
      

        """ example: string """
        contact_website: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        avatar_url: String
      
    }

    type PeopleOrganization {
      id: ID!
      attributes: PeopleOrganizationAttributes
      relationships: PeopleOrganizationRelationships
    }
  

    enum PeopleOrganizationStatisticsOrderByEnum {
      id
    }

    input PeopleOrganizationStatisticsOrderInput {
      sort: sortEnum = asc
      field: PeopleOrganizationStatisticsOrderByEnum
    }

    
    

    type PeopleOrganizationStatisticsAttributes {
      
        """ example: primary_key """
        id: ID!
      
    }

    type PeopleOrganizationStatistics {
      id: ID!
      attributes: PeopleOrganizationStatisticsAttributes
      
    }
  

    enum PeoplePeopleImportOrderByEnum {
      id
attribs
status
created_at
updated_at
processed_at
undone_at
    }

    input PeoplePeopleImportOrderInput {
      sort: sortEnum = asc
      field: PeoplePeopleImportOrderByEnum
    }

    
      input PeoplePeopleImportWhereAttributes {
        status: String
      }
    
    
      type PeoplePeopleImportRelationships {
        PeopleConflicts: [PeoplePeopleImportConflict]
PeopleHistories: [PeoplePeopleImportHistory]
      }
    

    type PeoplePeopleImportAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        attribs: String
      

        """ example: value """
        status: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        processed_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        undone_at: String
      
    }

    type PeoplePeopleImport {
      id: ID!
      attributes: PeoplePeopleImportAttributes
      relationships: PeoplePeopleImportRelationships
    }
  

    enum PeoplePeopleImportConflictOrderByEnum {
      id
kind
name
message
data
conflicting_changes
ignore
created_at
updated_at
    }

    input PeoplePeopleImportConflictOrderInput {
      sort: sortEnum = asc
      field: PeoplePeopleImportConflictOrderByEnum
    }

    
      input PeoplePeopleImportConflictWhereAttributes {
        kind: String
name: String
      }
    
    

    type PeoplePeopleImportConflictAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        kind: String
      

        """ example: string """
        name: String
      

        """ example: string """
        message: String
      

        """ example: string """
        data: String
      

        """ example: string """
        conflicting_changes: String
      

        """ example: true """
        ignore: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type PeoplePeopleImportConflict {
      id: ID!
      attributes: PeoplePeopleImportConflictAttributes
      
    }
  

    enum PeoplePeopleImportHistoryOrderByEnum {
      id
name
created_at
updated_at
conflicting_changes
kind
    }

    input PeoplePeopleImportHistoryOrderInput {
      sort: sortEnum = asc
      field: PeoplePeopleImportHistoryOrderByEnum
    }

    
      input PeoplePeopleImportHistoryWhereAttributes {
        name: String
      }
    
    
      type PeoplePeopleImportHistoryRelationships {
        PeopleHousehold: [PeopleHousehold]
PeoplePerson: [PeoplePerson]
      }
    

    type PeoplePeopleImportHistoryAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: [object Object] """
        conflicting_changes: String
      

        """ example: string """
        kind: String
      
    }

    type PeoplePeopleImportHistory {
      id: ID!
      attributes: PeoplePeopleImportHistoryAttributes
      relationships: PeoplePeopleImportHistoryRelationships
    }
  

    enum PeoplePersonOrderByEnum {
      id
given_name
first_name
nickname
middle_name
last_name
birthdate
anniversary
grade
child
graduation_year
site_administrator
accounting_administrator
people_permissions
gender
membership
inactivated_at
status
medical_notes
mfa_configured
created_at
updated_at
avatar
name
demographic_avatar_url
directory_status
can_create_forms
can_email_lists
passed_background_check
school_type
remote_id
directory_shared_info
    }

    input PeoplePersonOrderInput {
      sort: sortEnum = asc
      field: PeoplePersonOrderByEnum
    }

    
      input PeoplePersonWhereAttributes {
        accounting_administrator: Boolean
anniversary: String
birthdate: String
child: Boolean
created_at: String
first_name: String
gender: String
given_name: String
grade: Int
graduation_year: Int
id: ID!
inactivated_at: String
last_name: String
medical_notes: String
membership: String
mfa_configured: Boolean
middle_name: String
nickname: String
people_permissions: String
remote_id: Int
search_name: String
search_name_or_email: String
search_name_or_email_or_phone_number: String
search_phone_number: String
search_phone_number_e164: String
site_administrator: Boolean
status: String
updated_at: String
      }
    
    
      type PeoplePersonRelationships {
        People: [PeopleNoteCategorySubscription]
PeopleAddresses: [PeopleAddress]
PeopleApps: [PeopleApp]
PeopleBackground_checks: [PeopleBackgroundCheck]
PeopleConnected_people: [PeopleConnectedPerson]
PeopleEmails: [PeopleEmail]
PeopleField_data: [PeopleFieldDatum]
PeopleHousehold_memberships: [PeopleHouseholdMembership]
PeopleHouseholds: [PeopleHousehold]
PeopleInactive_reason: [PeopleInactiveReason]
PeopleMarital_status: [PeopleMaritalStatus]
PeopleMessage_groups: [PeopleMessageGroup]
PeopleMessages: [PeopleMessage]
PeopleName_prefix: [PeopleNamePrefix]
PeopleName_suffix: [PeopleNameSuffix]
PeopleNotes: [PeopleNote]
PeopleOrganization: [PeopleOrganization]
PeoplePerson_apps: [PeoplePersonApp]
PeoplePhone_numbers: [PeoplePhoneNumber]
PeoplePlatform_notifications: [PeoplePlatformNotification]
PeoplePrimary_campus: [PeopleCampus]
PeopleSchool: [PeopleSchoolOption]
PeopleSocial_profiles: [PeopleSocialProfile]
PeopleWorkflow_cards: [PeopleWorkflowCard]
PeopleWorkflow_shares: [PeopleWorkflowShare]
      }
    

    type PeoplePersonAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        given_name: String
      

        """ example: string """
        first_name: String
      

        """ example: string """
        nickname: String
      

        """ example: string """
        middle_name: String
      

        """ example: string """
        last_name: String
      

        """ example: 2000-01-01 """
        birthdate: String
      

        """ example: 2000-01-01 """
        anniversary: String
      

        """ example: 1 """
        grade: Int
      

        """ example: true """
        child: Boolean
      

        """ example: 1 """
        graduation_year: Int
      

        """ example: true """
        site_administrator: Boolean
      

        """ example: true """
        accounting_administrator: Boolean
      

        """ example: string """
        people_permissions: String
      

        """ example: string """
        gender: String
      

        """ example: string """
        membership: String
      

        """ example: 2000-01-01T12:00:00Z """
        inactivated_at: String
      

        """ example: string """
        status: String
      

        """ example: string """
        medical_notes: String
      

        """ example: true """
        mfa_configured: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        avatar: String
      

        """ example: string """
        name: String
      

        """ example: string """
        demographic_avatar_url: String
      

        """ example: string """
        directory_status: String
      

        """ example: true """
        can_create_forms: Boolean
      

        """ example: true """
        can_email_lists: Boolean
      

        """ example: true """
        passed_background_check: Boolean
      

        """ example: string """
        school_type: String
      

        """ example: 1 """
        remote_id: Int
      

        """ example: [object Object] """
        directory_shared_info: String
      
    }

    type PeoplePerson {
      id: ID!
      attributes: PeoplePersonAttributes
      relationships: PeoplePersonRelationships
    }
  

    enum PeoplePersonAppOrderByEnum {
      id
allow_pco_login
people_permissions
    }

    input PeoplePersonAppOrderInput {
      sort: sortEnum = asc
      field: PeoplePersonAppOrderByEnum
    }

    
    
      type PeoplePersonAppRelationships {
        PeopleApp: [PeopleApp]
      }
    

    type PeoplePersonAppAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        allow_pco_login: Boolean
      

        """ example: value """
        people_permissions: String
      
    }

    type PeoplePersonApp {
      id: ID!
      attributes: PeoplePersonAppAttributes
      relationships: PeoplePersonAppRelationships
    }
  

    enum PeoplePersonMergerOrderByEnum {
      id
created_at
person_to_keep_id
person_to_remove_id
    }

    input PeoplePersonMergerOrderInput {
      sort: sortEnum = asc
      field: PeoplePersonMergerOrderByEnum
    }

    
      input PeoplePersonMergerWhereAttributes {
        created_at: String
person_to_keep_id: ID!
person_to_remove_id: ID!
      }
    
    

    type PeoplePersonMergerAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: primary_key """
        person_to_keep_id: ID!
      

        """ example: primary_key """
        person_to_remove_id: ID!
      
    }

    type PeoplePersonMerger {
      id: ID!
      attributes: PeoplePersonMergerAttributes
      
    }
  

    enum PeoplePhoneNumberOrderByEnum {
      id
number
carrier
location
primary
created_at
updated_at
e164
international
national
country_code
formatted_number
    }

    input PeoplePhoneNumberOrderInput {
      sort: sortEnum = asc
      field: PeoplePhoneNumberOrderByEnum
    }

    
      input PeoplePhoneNumberWhereAttributes {
        carrier: String
created_at: String
location: String
number: String
primary: Boolean
updated_at: String
      }
    
    

    type PeoplePhoneNumberAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        number: String
      

        """ example: string """
        carrier: String
      

        """ example: string """
        location: String
      

        """ example: true """
        primary: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        e164: String
      

        """ example: string """
        international: String
      

        """ example: string """
        national: String
      

        """ example: string """
        country_code: String
      

        """ example: string """
        formatted_number: String
      
    }

    type PeoplePhoneNumber {
      id: ID!
      attributes: PeoplePhoneNumberAttributes
      
    }
  

    enum PeoplePlatformNotificationOrderByEnum {
      id
html
    }

    input PeoplePlatformNotificationOrderInput {
      sort: sortEnum = asc
      field: PeoplePlatformNotificationOrderByEnum
    }

    
    

    type PeoplePlatformNotificationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        html: String
      
    }

    type PeoplePlatformNotification {
      id: ID!
      attributes: PeoplePlatformNotificationAttributes
      
    }
  

    enum PeopleReportOrderByEnum {
      id
name
body
created_at
updated_at
    }

    input PeopleReportOrderInput {
      sort: sortEnum = asc
      field: PeopleReportOrderByEnum
    }

    
      input PeopleReportWhereAttributes {
        body: String
created_at: String
name: String
updated_at: String
      }
    
    
      type PeopleReportRelationships {
        PeopleCreated_by: [PeoplePerson]
PeopleUpdated_by: [PeoplePerson]
      }
    

    type PeopleReportAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        body: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type PeopleReport {
      id: ID!
      attributes: PeopleReportAttributes
      relationships: PeopleReportRelationships
    }
  

    enum PeopleRuleOrderByEnum {
      id
subset
created_at
updated_at
    }

    input PeopleRuleOrderInput {
      sort: sortEnum = asc
      field: PeopleRuleOrderByEnum
    }

    
      input PeopleRuleWhereAttributes {
        created_at: String
subset: String
updated_at: String
      }
    
    
      type PeopleRuleRelationships {
        PeopleConditions: [PeopleCondition]
      }
    

    type PeopleRuleAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        subset: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type PeopleRule {
      id: ID!
      attributes: PeopleRuleAttributes
      relationships: PeopleRuleRelationships
    }
  

    enum PeopleSchoolOptionOrderByEnum {
      id
value
sequence
beginning_grade
ending_grade
school_types
    }

    input PeopleSchoolOptionOrderInput {
      sort: sortEnum = asc
      field: PeopleSchoolOptionOrderByEnum
    }

    
      input PeopleSchoolOptionWhereAttributes {
        beginning_grade: String
ending_grade: String
school_types: String
sequence: Int
value: String
      }
    
    
      type PeopleSchoolOptionRelationships {
        PeoplePromotes_to_school: [PeopleSchoolOption]
      }
    

    type PeopleSchoolOptionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        value: String
      

        """ example: 1 """
        sequence: Int
      

        """ example: string """
        beginning_grade: String
      

        """ example: string """
        ending_grade: String
      

        """ example:  """
        school_types: String
      
    }

    type PeopleSchoolOption {
      id: ID!
      attributes: PeopleSchoolOptionAttributes
      relationships: PeopleSchoolOptionRelationships
    }
  

    enum PeopleServiceTimeOrderByEnum {
      id
start_time
day
description
    }

    input PeopleServiceTimeOrderInput {
      sort: sortEnum = asc
      field: PeopleServiceTimeOrderByEnum
    }

    
    

    type PeopleServiceTimeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        start_time: Int
      

        """ example: value """
        day: String
      

        """ example: string """
        description: String
      
    }

    type PeopleServiceTime {
      id: ID!
      attributes: PeopleServiceTimeAttributes
      
    }
  

    enum PeopleSocialProfileOrderByEnum {
      id
site
url
verified
created_at
updated_at
    }

    input PeopleSocialProfileOrderInput {
      sort: sortEnum = asc
      field: PeopleSocialProfileOrderByEnum
    }

    
      input PeopleSocialProfileWhereAttributes {
        created_at: String
site: String
updated_at: String
url: String
verified: Boolean
      }
    
    
      type PeopleSocialProfileRelationships {
        PeoplePerson: [PeoplePerson]
      }
    

    type PeopleSocialProfileAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        site: String
      

        """ example: string """
        url: String
      

        """ example: true """
        verified: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type PeopleSocialProfile {
      id: ID!
      attributes: PeopleSocialProfileAttributes
      relationships: PeopleSocialProfileRelationships
    }
  

    enum PeopleTabOrderByEnum {
      id
name
sequence
slug
    }

    input PeopleTabOrderInput {
      sort: sortEnum = asc
      field: PeopleTabOrderByEnum
    }

    
      input PeopleTabWhereAttributes {
        name: String
sequence: Int
slug: String
      }
    
    
      type PeopleTabRelationships {
        PeopleField_definitions: [PeopleFieldDefinition]
PeopleField_options: [PeopleFieldOption]
      }
    

    type PeopleTabAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: 1 """
        sequence: Int
      

        """ example: string """
        slug: String
      
    }

    type PeopleTab {
      id: ID!
      attributes: PeopleTabAttributes
      relationships: PeopleTabRelationships
    }
  

    enum PeopleWorkflowOrderByEnum {
      id
name
my_ready_card_count
total_ready_card_count
completed_card_count
total_cards_count
total_ready_and_snoozed_card_count
created_at
updated_at
deleted_at
campus_id
workflow_category_id
my_overdue_card_count
my_due_soon_card_count
recently_viewed
    }

    input PeopleWorkflowOrderInput {
      sort: sortEnum = asc
      field: PeopleWorkflowOrderByEnum
    }

    
      input PeopleWorkflowWhereAttributes {
        campus_id: ID!
created_at: String
deleted_at: String
id: ID!
name: String
updated_at: String
workflow_category_id: ID!
      }
    
    
      type PeopleWorkflowRelationships {
        PeopleCards: [PeopleWorkflowCard]
PeopleCategory: [PeopleWorkflowCategory]
PeopleShared_people: [PeoplePerson]
PeopleShares: [PeopleWorkflowShare]
PeopleSteps: [PeopleWorkflowStep]
      }
    

    type PeopleWorkflowAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: 1 """
        my_ready_card_count: Int
      

        """ example: 1 """
        total_ready_card_count: Int
      

        """ example: 1 """
        completed_card_count: Int
      

        """ example: 1 """
        total_cards_count: Int
      

        """ example: 1 """
        total_ready_and_snoozed_card_count: Int
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        deleted_at: String
      

        """ example: primary_key """
        campus_id: ID!
      

        """ example: primary_key """
        workflow_category_id: ID!
      

        """ example: 1 """
        my_overdue_card_count: Int
      

        """ example: 1 """
        my_due_soon_card_count: Int
      

        """ example: true """
        recently_viewed: Boolean
      
    }

    type PeopleWorkflow {
      id: ID!
      attributes: PeopleWorkflowAttributes
      relationships: PeopleWorkflowRelationships
    }
  

    enum PeopleWorkflowCardOrderByEnum {
      id
snooze_until
overdue
stage
calculated_due_at_in_days_ago
sticky_assignment
created_at
updated_at
completed_at
flagged_for_notification_at
removed_at
moved_to_step_at
    }

    input PeopleWorkflowCardOrderInput {
      sort: sortEnum = asc
      field: PeopleWorkflowCardOrderByEnum
    }

    
      input PeopleWorkflowCardWhereAttributes {
        stage: String
      }
    
    
      type PeopleWorkflowCardRelationships {
        PeopleActivities: [PeopleWorkflowCardActivity]
PeopleAssignee: [PeoplePerson]
PeopleCurrent_step: [PeopleWorkflowStep]
PeopleNotes: [PeopleWorkflowCardNote]
PeoplePerson: [PeoplePerson]
PeopleWorkflow: [PeopleWorkflow]
      }
    

    type PeopleWorkflowCardAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        snooze_until: String
      

        """ example: true """
        overdue: Boolean
      

        """ example: string """
        stage: String
      

        """ example: 1 """
        calculated_due_at_in_days_ago: Int
      

        """ example: true """
        sticky_assignment: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        completed_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        flagged_for_notification_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        removed_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        moved_to_step_at: String
      
    }

    type PeopleWorkflowCard {
      id: ID!
      attributes: PeopleWorkflowCardAttributes
      relationships: PeopleWorkflowCardRelationships
    }
  

    enum PeopleWorkflowCardActivityOrderByEnum {
      id
comment
content
form_submission_url
person_avatar_url
person_name
reassigned_to_avatar_url
reassigned_to_name
subject
type
content_is_html
created_at
    }

    input PeopleWorkflowCardActivityOrderInput {
      sort: sortEnum = asc
      field: PeopleWorkflowCardActivityOrderByEnum
    }

    
    

    type PeopleWorkflowCardActivityAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        comment: String
      

        """ example: string """
        content: String
      

        """ example: string """
        form_submission_url: String
      

        """ example: string """
        person_avatar_url: String
      

        """ example: string """
        person_name: String
      

        """ example: string """
        reassigned_to_avatar_url: String
      

        """ example: string """
        reassigned_to_name: String
      

        """ example: string """
        subject: String
      

        """ example: string """
        type: String
      

        """ example: true """
        content_is_html: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      
    }

    type PeopleWorkflowCardActivity {
      id: ID!
      attributes: PeopleWorkflowCardActivityAttributes
      
    }
  

    enum PeopleWorkflowCardNoteOrderByEnum {
      id
note
created_at
    }

    input PeopleWorkflowCardNoteOrderInput {
      sort: sortEnum = asc
      field: PeopleWorkflowCardNoteOrderByEnum
    }

    
    

    type PeopleWorkflowCardNoteAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        note: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      
    }

    type PeopleWorkflowCardNote {
      id: ID!
      attributes: PeopleWorkflowCardNoteAttributes
      
    }
  

    enum PeopleWorkflowCategoryOrderByEnum {
      id
name
created_at
updated_at
    }

    input PeopleWorkflowCategoryOrderInput {
      sort: sortEnum = asc
      field: PeopleWorkflowCategoryOrderByEnum
    }

    
      input PeopleWorkflowCategoryWhereAttributes {
        created_at: String
name: String
updated_at: String
      }
    
    

    type PeopleWorkflowCategoryAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type PeopleWorkflowCategory {
      id: ID!
      attributes: PeopleWorkflowCategoryAttributes
      
    }
  

    enum PeopleWorkflowShareOrderByEnum {
      id
group
permission
person_id
    }

    input PeopleWorkflowShareOrderInput {
      sort: sortEnum = asc
      field: PeopleWorkflowShareOrderByEnum
    }

    
      input PeopleWorkflowShareWhereAttributes {
        permission: String
      }
    
    
      type PeopleWorkflowShareRelationships {
        PeoplePerson: [PeoplePerson]
      }
    

    type PeopleWorkflowShareAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: value """
        group: String
      

        """ example: value """
        permission: String
      

        """ example: primary_key """
        person_id: ID!
      
    }

    type PeopleWorkflowShare {
      id: ID!
      attributes: PeopleWorkflowShareAttributes
      relationships: PeopleWorkflowShareRelationships
    }
  

    enum PeopleWorkflowStepOrderByEnum {
      id
created_at
updated_at
sequence
name
description
auto_snooze_days
auto_snooze_value
auto_snooze_interval
expected_response_time_in_days
my_ready_card_count
total_ready_card_count
default_assignee_id
    }

    input PeopleWorkflowStepOrderInput {
      sort: sortEnum = asc
      field: PeopleWorkflowStepOrderByEnum
    }

    
      input PeopleWorkflowStepWhereAttributes {
        created_at: String
name: String
updated_at: String
      }
    
    
      type PeopleWorkflowStepRelationships {
        PeopleAssignee_summaries: [PeopleWorkflowStepAssigneeSummary]
PeopleDefault_assignee: [PeoplePerson]
      }
    

    type PeopleWorkflowStepAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 1 """
        sequence: Int
      

        """ example: string """
        name: String
      

        """ example: string """
        description: String
      

        """ example: 1 """
        auto_snooze_days: Int
      

        """ example: 1 """
        auto_snooze_value: Int
      

        """ example: value """
        auto_snooze_interval: String
      

        """ example: 1 """
        expected_response_time_in_days: Int
      

        """ example: 1 """
        my_ready_card_count: Int
      

        """ example: 1 """
        total_ready_card_count: Int
      

        """ example: primary_key """
        default_assignee_id: ID!
      
    }

    type PeopleWorkflowStep {
      id: ID!
      attributes: PeopleWorkflowStepAttributes
      relationships: PeopleWorkflowStepRelationships
    }
  

    enum PeopleWorkflowStepAssigneeSummaryOrderByEnum {
      id
ready_count
snoozed_count
    }

    input PeopleWorkflowStepAssigneeSummaryOrderInput {
      sort: sortEnum = asc
      field: PeopleWorkflowStepAssigneeSummaryOrderByEnum
    }

    
    
      type PeopleWorkflowStepAssigneeSummaryRelationships {
        PeoplePerson: [PeoplePerson]
      }
    

    type PeopleWorkflowStepAssigneeSummaryAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        ready_count: Int
      

        """ example: 1 """
        snoozed_count: Int
      
    }

    type PeopleWorkflowStepAssigneeSummary {
      id: ID!
      attributes: PeopleWorkflowStepAssigneeSummaryAttributes
      relationships: PeopleWorkflowStepAssigneeSummaryRelationships
    }
  

    enum PublishingChannelOrderByEnum {
      id
activate_episode_minutes_before
art
can_enable_chat
church_center_url
created_at
default_video_duration
default_video_embed_code
description
enable_audio
enable_watch_live
general_chat_enabled
group_chat_enabled
name
podcast_art
podcast_feed_url
podcast_settings
position
published
services_service_type_remote_identifier
updated_at
url
    }

    input PublishingChannelOrderInput {
      sort: sortEnum = asc
      field: PublishingChannelOrderByEnum
    }

    
    
      type PublishingChannelRelationships {
        PublishingChannel_default_episode_resources: [PublishingChannelDefaultEpisodeResource]
PublishingChannel_default_times: [PublishingChannelDefaultTime]
PublishingCurrent_episode: [PublishingEpisode]
PublishingEpisodes: [PublishingEpisode]
PublishingNext_times: [PublishingChannelNextTime]
PublishingSeries: [PublishingSeries]
PublishingStatistics: [PublishingEpisodeStatistics]
      }
    

    type PublishingChannelAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        activate_episode_minutes_before: Int
      

        """ example: [object Object] """
        art: String
      

        """ example: true """
        can_enable_chat: Boolean
      

        """ example: string """
        church_center_url: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 1 """
        default_video_duration: Int
      

        """ example: string """
        default_video_embed_code: String
      

        """ example: string """
        description: String
      

        """ example: true """
        enable_audio: Boolean
      

        """ example: true """
        enable_watch_live: Boolean
      

        """ example: true """
        general_chat_enabled: Boolean
      

        """ example: true """
        group_chat_enabled: Boolean
      

        """ example: string """
        name: String
      

        """ example: [object Object] """
        podcast_art: String
      

        """ example: string """
        podcast_feed_url: String
      

        """ example: [object Object] """
        podcast_settings: String
      

        """ example: 1 """
        position: Int
      

        """ example: true """
        published: Boolean
      

        """ example: string """
        services_service_type_remote_identifier: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        url: String
      
    }

    type PublishingChannel {
      id: ID!
      attributes: PublishingChannelAttributes
      relationships: PublishingChannelRelationships
    }
  

    enum PublishingChannelDefaultEpisodeResourceOrderByEnum {
      id
featured
icon
kind
position
title
type
url
    }

    input PublishingChannelDefaultEpisodeResourceOrderInput {
      sort: sortEnum = asc
      field: PublishingChannelDefaultEpisodeResourceOrderByEnum
    }

    
    

    type PublishingChannelDefaultEpisodeResourceAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        featured: Boolean
      

        """ example: string """
        icon: String
      

        """ example: string """
        kind: String
      

        """ example: 1 """
        position: Int
      

        """ example: string """
        title: String
      

        """ example: string """
        type: String
      

        """ example: string """
        url: String
      
    }

    type PublishingChannelDefaultEpisodeResource {
      id: ID!
      attributes: PublishingChannelDefaultEpisodeResourceAttributes
      
    }
  

    enum PublishingChannelDefaultTimeOrderByEnum {
      id
day_of_week
hour
minute
frequency
position
    }

    input PublishingChannelDefaultTimeOrderInput {
      sort: sortEnum = asc
      field: PublishingChannelDefaultTimeOrderByEnum
    }

    
    

    type PublishingChannelDefaultTimeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        day_of_week: Int
      

        """ example: 1 """
        hour: Int
      

        """ example: 1 """
        minute: Int
      

        """ example: string """
        frequency: String
      

        """ example: 1 """
        position: Int
      
    }

    type PublishingChannelDefaultTime {
      id: ID!
      attributes: PublishingChannelDefaultTimeAttributes
      
    }
  

    enum PublishingChannelNextTimeOrderByEnum {
      id
starts_at
    }

    input PublishingChannelNextTimeOrderInput {
      sort: sortEnum = asc
      field: PublishingChannelNextTimeOrderByEnum
    }

    
    

    type PublishingChannelNextTimeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      
    }

    type PublishingChannelNextTime {
      id: ID!
      attributes: PublishingChannelNextTimeAttributes
      
    }
  

    enum PublishingEpisodeOrderByEnum {
      id
art
church_center_url
created_at
description
host
library_audio_url
library_streaming_service
library_video_thumbnail_url
library_video_url
needs_library_audio_or_video_url
needs_video_url
page_actions
published_live_at
published_to_library_at
sermon_audio
stream_type
streaming_service
title
updated_at
video_thumbnail_url
video_url
services_plan_remote_identifier
services_service_type_remote_identifier
    }

    input PublishingEpisodeOrderInput {
      sort: sortEnum = asc
      field: PublishingEpisodeOrderByEnum
    }

    
      input PublishingEpisodeWhereAttributes {
        services_plan_remote_identifier: String
services_service_type_remote_identifier: String
      }
    
    
      type PublishingEpisodeRelationships {
        PublishingChannel: [PublishingChannel]
PublishingEpisode_resources: [PublishingEpisodeResource]
PublishingEpisode_times: [PublishingEpisodeTime]
PublishingSeries: [PublishingSeries]
      }
    

    type PublishingEpisodeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: [object Object] """
        art: String
      

        """ example: string """
        church_center_url: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        description: String
      

        """ example: string """
        host: String
      

        """ example: string """
        library_audio_url: String
      

        """ example: value """
        library_streaming_service: String
      

        """ example: string """
        library_video_thumbnail_url: String
      

        """ example: string """
        library_video_url: String
      

        """ example: true """
        needs_library_audio_or_video_url: Boolean
      

        """ example: true """
        needs_video_url: Boolean
      

        """ example:  """
        page_actions: String
      

        """ example: 2000-01-01T12:00:00Z """
        published_live_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        published_to_library_at: String
      

        """ example: [object Object] """
        sermon_audio: String
      

        """ example: value """
        stream_type: String
      

        """ example: value """
        streaming_service: String
      

        """ example: string """
        title: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        video_thumbnail_url: String
      

        """ example: string """
        video_url: String
      

        """ example: string """
        services_plan_remote_identifier: String
      

        """ example: string """
        services_service_type_remote_identifier: String
      
    }

    type PublishingEpisode {
      id: ID!
      attributes: PublishingEpisodeAttributes
      relationships: PublishingEpisodeRelationships
    }
  

    enum PublishingEpisodeResourceOrderByEnum {
      id
featured
icon
kind
position
title
type
url
    }

    input PublishingEpisodeResourceOrderInput {
      sort: sortEnum = asc
      field: PublishingEpisodeResourceOrderByEnum
    }

    
    

    type PublishingEpisodeResourceAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        featured: Boolean
      

        """ example: string """
        icon: String
      

        """ example: string """
        kind: String
      

        """ example: 1 """
        position: Int
      

        """ example: string """
        title: String
      

        """ example: string """
        type: String
      

        """ example: string """
        url: String
      
    }

    type PublishingEpisodeResource {
      id: ID!
      attributes: PublishingEpisodeResourceAttributes
      
    }
  

    enum PublishingEpisodeStatisticsOrderByEnum {
      id
times
library_watch_count
live_watch_count
published_to_library_at
published_live_at
title
    }

    input PublishingEpisodeStatisticsOrderInput {
      sort: sortEnum = asc
      field: PublishingEpisodeStatisticsOrderByEnum
    }

    
    

    type PublishingEpisodeStatisticsAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example:  """
        times: String
      

        """ example: true """
        library_watch_count: Boolean
      

        """ example: true """
        live_watch_count: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        published_to_library_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        published_live_at: String
      

        """ example: string """
        title: String
      
    }

    type PublishingEpisodeStatistics {
      id: ID!
      attributes: PublishingEpisodeStatisticsAttributes
      
    }
  

    enum PublishingEpisodeTimeOrderByEnum {
      id
starts_at
ends_at
video_url
video_embed_code
current_timestamp
current_state
streaming_service
caveats
    }

    input PublishingEpisodeTimeOrderInput {
      sort: sortEnum = asc
      field: PublishingEpisodeTimeOrderByEnum
    }

    
    

    type PublishingEpisodeTimeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        ends_at: String
      

        """ example: string """
        video_url: String
      

        """ example: string """
        video_embed_code: String
      

        """ example: 1.42 """
        current_timestamp: Int
      

        """ example: string """
        current_state: String
      

        """ example: string """
        streaming_service: String
      

        """ example:  """
        caveats: String
      
    }

    type PublishingEpisodeTime {
      id: ID!
      attributes: PublishingEpisodeTimeAttributes
      
    }
  

    enum PublishingJoltTokenOrderByEnum {
      id
    }

    input PublishingJoltTokenOrderInput {
      sort: sortEnum = asc
      field: PublishingJoltTokenOrderByEnum
    }

    
    

    type PublishingJoltTokenAttributes {
      
        """ example: primary_key """
        id: ID!
      
    }

    type PublishingJoltToken {
      id: ID!
      attributes: PublishingJoltTokenAttributes
      
    }
  

    enum PublishingOrganizationOrderByEnum {
      id
name
subdomain
downloads_used
    }

    input PublishingOrganizationOrderInput {
      sort: sortEnum = asc
      field: PublishingOrganizationOrderByEnum
    }

    
    
      type PublishingOrganizationRelationships {
        PublishingChannels: [PublishingChannel]
PublishingEpisodes: [PublishingEpisode]
PublishingSeries: [PublishingSeries]
      }
    

    type PublishingOrganizationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        subdomain: String
      

        """ example: 1 """
        downloads_used: Int
      
    }

    type PublishingOrganization {
      id: ID!
      attributes: PublishingOrganizationAttributes
      relationships: PublishingOrganizationRelationships
    }
  

    enum PublishingPageRestrictionOrderByEnum {
      id
type
value
version
    }

    input PublishingPageRestrictionOrderInput {
      sort: sortEnum = asc
      field: PublishingPageRestrictionOrderByEnum
    }

    
    

    type PublishingPageRestrictionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        type: String
      

        """ example: string """
        value: String
      

        """ example: string """
        version: String
      
    }

    type PublishingPageRestriction {
      id: ID!
      attributes: PublishingPageRestrictionAttributes
      
    }
  

    enum PublishingSeriesOrderByEnum {
      id
art
church_center_url
description
ended_at
episodes_count
published
started_at
title
created_at
updated_at
    }

    input PublishingSeriesOrderInput {
      sort: sortEnum = asc
      field: PublishingSeriesOrderByEnum
    }

    
      input PublishingSeriesWhereAttributes {
        id: ID!
      }
    
    
      type PublishingSeriesRelationships {
        PublishingChannel: [PublishingChannel]
      }
    

    type PublishingSeriesAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: [object Object] """
        art: String
      

        """ example: string """
        church_center_url: String
      

        """ example: string """
        description: String
      

        """ example: 2000-01-01T12:00:00Z """
        ended_at: String
      

        """ example: 1 """
        episodes_count: Int
      

        """ example: true """
        published: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        started_at: String
      

        """ example: string """
        title: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type PublishingSeries {
      id: ID!
      attributes: PublishingSeriesAttributes
      relationships: PublishingSeriesRelationships
    }
  

    enum ServicesArrangementOrderByEnum {
      id
bpm
created_at
has_chords
length
meter
name
notes
print_margin
print_orientation
print_page_size
updated_at
chord_chart
chord_chart_font
chord_chart_key
chord_chart_columns
chord_chart_font_size
has_chord_chart
lyrics_enabled
number_chart_enabled
numeral_chart_enabled
sequence
sequence_short
sequence_full
chord_chart_chord_color
archived_at
lyrics
    }

    input ServicesArrangementOrderInput {
      sort: sortEnum = asc
      field: ServicesArrangementOrderByEnum
    }

    
    
      type ServicesArrangementRelationships {
        ServicesAttachments: [ServicesAttachment]
ServicesKeys: [ServicesKey]
ServicesSections: [ServicesArrangementSections]
ServicesTags: [ServicesTag]
      }
    

    type ServicesArrangementAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1.42 """
        bpm: Int
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: true """
        has_chords: Boolean
      

        """ example: 1 """
        length: Int
      

        """ example: string """
        meter: String
      

        """ example: string """
        name: String
      

        """ example: string """
        notes: String
      

        """ example: string """
        print_margin: String
      

        """ example: string """
        print_orientation: String
      

        """ example: string """
        print_page_size: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        chord_chart: String
      

        """ example: string """
        chord_chart_font: String
      

        """ example: string """
        chord_chart_key: String
      

        """ example: 1 """
        chord_chart_columns: Int
      

        """ example: 1 """
        chord_chart_font_size: Int
      

        """ example: true """
        has_chord_chart: Boolean
      

        """ example: true """
        lyrics_enabled: Boolean
      

        """ example: true """
        number_chart_enabled: Boolean
      

        """ example: true """
        numeral_chart_enabled: Boolean
      

        """ example:  """
        sequence: String
      

        """ example:  """
        sequence_short: String
      

        """ example:  """
        sequence_full: String
      

        """ example: 1 """
        chord_chart_chord_color: Int
      

        """ example: 2000-01-01T12:00:00Z """
        archived_at: String
      

        """ example: string """
        lyrics: String
      
    }

    type ServicesArrangement {
      id: ID!
      attributes: ServicesArrangementAttributes
      relationships: ServicesArrangementRelationships
    }
  

    enum ServicesArrangementSectionsOrderByEnum {
      id
sections
    }

    input ServicesArrangementSectionsOrderInput {
      sort: sortEnum = asc
      field: ServicesArrangementSectionsOrderByEnum
    }

    
    

    type ServicesArrangementSectionsAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example:  """
        sections: String
      
    }

    type ServicesArrangementSections {
      id: ID!
      attributes: ServicesArrangementSectionsAttributes
      
    }
  

    enum ServicesAttachmentOrderByEnum {
      id
created_at
page_order
updated_at
filename
file_size
licenses_purchased
licenses_remaining
licenses_used
content
content_type
display_name
filetype
linked_url
pco_type
remote_link
thumbnail_url
url
allow_mp3_download
web_streamable
downloadable
transposable
import_to_item_details
streamable
has_preview
file_upload_identifier
    }

    input ServicesAttachmentOrderInput {
      sort: sortEnum = asc
      field: ServicesAttachmentOrderByEnum
    }

    
      input ServicesAttachmentWhereAttributes {
        licenses_purchased: Int
      }
    
    
      type ServicesAttachmentRelationships {
        ServicesZooms: [ServicesZoom]
      }
    

    type ServicesAttachmentAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        page_order: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        filename: String
      

        """ example: 1 """
        file_size: Int
      

        """ example: 1 """
        licenses_purchased: Int
      

        """ example: 1 """
        licenses_remaining: Int
      

        """ example: 1 """
        licenses_used: Int
      

        """ example: string """
        content: String
      

        """ example: string """
        content_type: String
      

        """ example: string """
        display_name: String
      

        """ example: string """
        filetype: String
      

        """ example: string """
        linked_url: String
      

        """ example: string """
        pco_type: String
      

        """ example: string """
        remote_link: String
      

        """ example: string """
        thumbnail_url: String
      

        """ example: string """
        url: String
      

        """ example: true """
        allow_mp3_download: Boolean
      

        """ example: true """
        web_streamable: Boolean
      

        """ example: true """
        downloadable: Boolean
      

        """ example: true """
        transposable: Boolean
      

        """ example: true """
        import_to_item_details: Boolean
      

        """ example: true """
        streamable: Boolean
      

        """ example: true """
        has_preview: Boolean
      

        """ example: string """
        file_upload_identifier: String
      
    }

    type ServicesAttachment {
      id: ID!
      attributes: ServicesAttachmentAttributes
      relationships: ServicesAttachmentRelationships
    }
  

    enum ServicesAttachmentActivityOrderByEnum {
      id
date
attachment_url
activity_type
    }

    input ServicesAttachmentActivityOrderInput {
      sort: sortEnum = asc
      field: ServicesAttachmentActivityOrderByEnum
    }

    
    

    type ServicesAttachmentActivityAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01 """
        date: String
      

        """ example: string """
        attachment_url: String
      

        """ example: string """
        activity_type: String
      
    }

    type ServicesAttachmentActivity {
      id: ID!
      attributes: ServicesAttachmentActivityAttributes
      
    }
  

    enum ServicesAttachmentTypeOrderByEnum {
      id
name
aliases
capoed_chord_charts
chord_charts
exclusions
lyrics
number_charts
numeral_charts
built_in
    }

    input ServicesAttachmentTypeOrderInput {
      sort: sortEnum = asc
      field: ServicesAttachmentTypeOrderByEnum
    }

    
    

    type ServicesAttachmentTypeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: string """
        aliases: String
      

        """ example: true """
        capoed_chord_charts: Boolean
      

        """ example: true """
        chord_charts: Boolean
      

        """ example: string """
        exclusions: String
      

        """ example: true """
        lyrics: Boolean
      

        """ example: true """
        number_charts: Boolean
      

        """ example: true """
        numeral_charts: Boolean
      

        """ example: true """
        built_in: Boolean
      
    }

    type ServicesAttachmentType {
      id: ID!
      attributes: ServicesAttachmentTypeAttributes
      
    }
  

    enum ServicesAttendanceOrderByEnum {
      id
checked_in_at
check_ins_event_id
check_ins_event_period_id
    }

    input ServicesAttendanceOrderInput {
      sort: sortEnum = asc
      field: ServicesAttendanceOrderByEnum
    }

    
    

    type ServicesAttendanceAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        checked_in_at: String
      

        """ example: primary_key """
        check_ins_event_id: ID!
      

        """ example: primary_key """
        check_ins_event_period_id: ID!
      
    }

    type ServicesAttendance {
      id: ID!
      attributes: ServicesAttendanceAttributes
      
    }
  

    enum ServicesAvailableSignupOrderByEnum {
      id
organization_name
planning_center_url
service_type_name
signups_available
    }

    input ServicesAvailableSignupOrderInput {
      sort: sortEnum = asc
      field: ServicesAvailableSignupOrderByEnum
    }

    
    
      type ServicesAvailableSignupRelationships {
        ServicesSignup_sheets: [ServicesSignupSheet]
      }
    

    type ServicesAvailableSignupAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        organization_name: String
      

        """ example: string """
        planning_center_url: String
      

        """ example: string """
        service_type_name: String
      

        """ example: true """
        signups_available: Boolean
      
    }

    type ServicesAvailableSignup {
      id: ID!
      attributes: ServicesAvailableSignupAttributes
      relationships: ServicesAvailableSignupRelationships
    }
  

    enum ServicesBlockoutOrderByEnum {
      id
description
group_identifier
organization_name
reason
repeat_frequency
repeat_interval
repeat_period
settings
time_zone
created_at
updated_at
repeat_until
starts_at
ends_at
share
    }

    input ServicesBlockoutOrderInput {
      sort: sortEnum = asc
      field: ServicesBlockoutOrderByEnum
    }

    
      input ServicesBlockoutWhereAttributes {
        group_identifier: String
      }
    
    
      type ServicesBlockoutRelationships {
        ServicesBlockout_dates: [ServicesBlockoutDate]
ServicesBlockout_exceptions: [ServicesBlockoutException]
      }
    

    type ServicesBlockoutAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        description: String
      

        """ example: string """
        group_identifier: String
      

        """ example: string """
        organization_name: String
      

        """ example: string """
        reason: String
      

        """ example: string """
        repeat_frequency: String
      

        """ example: string """
        repeat_interval: String
      

        """ example: string """
        repeat_period: String
      

        """ example: string """
        settings: String
      

        """ example: string """
        time_zone: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01 """
        repeat_until: String
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        ends_at: String
      

        """ example: true """
        share: Boolean
      
    }

    type ServicesBlockout {
      id: ID!
      attributes: ServicesBlockoutAttributes
      relationships: ServicesBlockoutRelationships
    }
  

    enum ServicesBlockoutDateOrderByEnum {
      id
group_identifier
reason
time_zone
share
starts_at
ends_at
ends_at_utc
starts_at_utc
    }

    input ServicesBlockoutDateOrderInput {
      sort: sortEnum = asc
      field: ServicesBlockoutDateOrderByEnum
    }

    
    

    type ServicesBlockoutDateAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        group_identifier: String
      

        """ example: string """
        reason: String
      

        """ example: string """
        time_zone: String
      

        """ example: true """
        share: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        ends_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        ends_at_utc: String
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at_utc: String
      
    }

    type ServicesBlockoutDate {
      id: ID!
      attributes: ServicesBlockoutDateAttributes
      
    }
  

    enum ServicesBlockoutExceptionOrderByEnum {
      id
date
created_at
updated_at
    }

    input ServicesBlockoutExceptionOrderInput {
      sort: sortEnum = asc
      field: ServicesBlockoutExceptionOrderByEnum
    }

    
    

    type ServicesBlockoutExceptionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01 """
        date: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type ServicesBlockoutException {
      id: ID!
      attributes: ServicesBlockoutExceptionAttributes
      
    }
  

    enum ServicesBlockoutScheduleConflictOrderByEnum {
      id
dates
organization_name
person_avatar
person_name
position_display_times
service_type_name
short_dates
status
team_name
team_position_name
sort_date
can_accept_partial
    }

    input ServicesBlockoutScheduleConflictOrderInput {
      sort: sortEnum = asc
      field: ServicesBlockoutScheduleConflictOrderByEnum
    }

    
    

    type ServicesBlockoutScheduleConflictAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        dates: String
      

        """ example: string """
        organization_name: String
      

        """ example: string """
        person_avatar: String
      

        """ example: string """
        person_name: String
      

        """ example: string """
        position_display_times: String
      

        """ example: string """
        service_type_name: String
      

        """ example: string """
        short_dates: String
      

        """ example: string """
        status: String
      

        """ example: string """
        team_name: String
      

        """ example: string """
        team_position_name: String
      

        """ example: 2000-01-01T12:00:00Z """
        sort_date: String
      

        """ example: true """
        can_accept_partial: Boolean
      
    }

    type ServicesBlockoutScheduleConflict {
      id: ID!
      attributes: ServicesBlockoutScheduleConflictAttributes
      
    }
  

    enum ServicesChatOrderByEnum {
      id
payload
people
plans
teams
teams_i_lead
    }

    input ServicesChatOrderInput {
      sort: sortEnum = asc
      field: ServicesChatOrderByEnum
    }

    
    

    type ServicesChatAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        payload: String
      

        """ example:  """
        people: String
      

        """ example:  """
        plans: String
      

        """ example:  """
        teams: String
      

        """ example:  """
        teams_i_lead: String
      
    }

    type ServicesChat {
      id: ID!
      attributes: ServicesChatAttributes
      
    }
  

    enum ServicesContributorOrderByEnum {
      id
created_at
updated_at
contributable_action
contributable_category
contributable_type
full_name
photo_thumbnail_url
    }

    input ServicesContributorOrderInput {
      sort: sortEnum = asc
      field: ServicesContributorOrderByEnum
    }

    
    

    type ServicesContributorAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        contributable_action: String
      

        """ example: string """
        contributable_category: String
      

        """ example: string """
        contributable_type: String
      

        """ example: string """
        full_name: String
      

        """ example: string """
        photo_thumbnail_url: String
      
    }

    type ServicesContributor {
      id: ID!
      attributes: ServicesContributorAttributes
      
    }
  

    enum ServicesCustomSlideOrderByEnum {
      id
body
label
order
enabled
    }

    input ServicesCustomSlideOrderInput {
      sort: sortEnum = asc
      field: ServicesCustomSlideOrderByEnum
    }

    
    

    type ServicesCustomSlideAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        body: String
      

        """ example: string """
        label: String
      

        """ example: 1 """
        order: Int
      

        """ example: true """
        enabled: Boolean
      
    }

    type ServicesCustomSlide {
      id: ID!
      attributes: ServicesCustomSlideAttributes
      
    }
  

    enum ServicesEmailOrderByEnum {
      id
primary
address
    }

    input ServicesEmailOrderInput {
      sort: sortEnum = asc
      field: ServicesEmailOrderByEnum
    }

    
    

    type ServicesEmailAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        primary: Boolean
      

        """ example: string """
        address: String
      
    }

    type ServicesEmail {
      id: ID!
      attributes: ServicesEmailAttributes
      
    }
  

    enum ServicesEmailTemplateOrderByEnum {
      id
kind
created_at
updated_at
html_body
subject
    }

    input ServicesEmailTemplateOrderInput {
      sort: sortEnum = asc
      field: ServicesEmailTemplateOrderByEnum
    }

    
    

    type ServicesEmailTemplateAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        kind: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        html_body: String
      

        """ example: string """
        subject: String
      
    }

    type ServicesEmailTemplate {
      id: ID!
      attributes: ServicesEmailTemplateAttributes
      
    }
  

    enum ServicesEmailTemplateRenderedResponseOrderByEnum {
      id
body
subject
    }

    input ServicesEmailTemplateRenderedResponseOrderInput {
      sort: sortEnum = asc
      field: ServicesEmailTemplateRenderedResponseOrderByEnum
    }

    
    

    type ServicesEmailTemplateRenderedResponseAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        body: String
      

        """ example: string """
        subject: String
      
    }

    type ServicesEmailTemplateRenderedResponse {
      id: ID!
      attributes: ServicesEmailTemplateRenderedResponseAttributes
      
    }
  

    enum ServicesFolderOrderByEnum {
      id
created_at
name
updated_at
container
    }

    input ServicesFolderOrderInput {
      sort: sortEnum = asc
      field: ServicesFolderOrderByEnum
    }

    
    
      type ServicesFolderRelationships {
        ServicesFolders: [ServicesFolder]
ServicesService_types: [ServicesServiceType]
      }
    

    type ServicesFolderAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        name: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        container: String
      
    }

    type ServicesFolder {
      id: ID!
      attributes: ServicesFolderAttributes
      relationships: ServicesFolderRelationships
    }
  

    enum ServicesFolderPathOrderByEnum {
      id
path
    }

    input ServicesFolderPathOrderInput {
      sort: sortEnum = asc
      field: ServicesFolderPathOrderByEnum
    }

    
    

    type ServicesFolderPathAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example:  """
        path: String
      
    }

    type ServicesFolderPath {
      id: ID!
      attributes: ServicesFolderPathAttributes
      
    }
  

    enum ServicesItemOrderByEnum {
      id
title
sequence
created_at
updated_at
length
item_type
html_details
service_position
description
key_name
custom_arrangement_sequence
custom_arrangement_sequence_short
custom_arrangement_sequence_full
    }

    input ServicesItemOrderInput {
      sort: sortEnum = asc
      field: ServicesItemOrderByEnum
    }

    
    
      type ServicesItemRelationships {
        ServicesArrangement: [ServicesArrangement]
ServicesAttachments: [ServicesAttachment]
ServicesCustom_slides: [ServicesCustomSlide]
ServicesItem_notes: [ServicesItemNote]
ServicesItem_times: [ServicesItemTime]
ServicesKey: [ServicesKey]
ServicesMedia: [ServicesMedia]
ServicesSelected_attachment: [ServicesAttachment]
ServicesSelected_background: [ServicesAttachment]
ServicesSong: [ServicesSong]
      }
    

    type ServicesItemAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        title: String
      

        """ example: 1 """
        sequence: Int
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 1 """
        length: Int
      

        """ example: string """
        item_type: String
      

        """ example: string """
        html_details: String
      

        """ example: string """
        service_position: String
      

        """ example: string """
        description: String
      

        """ example: string """
        key_name: String
      

        """ example:  """
        custom_arrangement_sequence: String
      

        """ example:  """
        custom_arrangement_sequence_short: String
      

        """ example:  """
        custom_arrangement_sequence_full: String
      
    }

    type ServicesItem {
      id: ID!
      attributes: ServicesItemAttributes
      relationships: ServicesItemRelationships
    }
  

    enum ServicesItemNoteOrderByEnum {
      id
created_at
updated_at
content
category_name
    }

    input ServicesItemNoteOrderInput {
      sort: sortEnum = asc
      field: ServicesItemNoteOrderByEnum
    }

    
    
      type ServicesItemNoteRelationships {
        ServicesItem_note_category: [ServicesItemNoteCategory]
      }
    

    type ServicesItemNoteAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        content: String
      

        """ example: string """
        category_name: String
      
    }

    type ServicesItemNote {
      id: ID!
      attributes: ServicesItemNoteAttributes
      relationships: ServicesItemNoteRelationships
    }
  

    enum ServicesItemNoteCategoryOrderByEnum {
      id
created_at
deleted_at
name
sequence
updated_at
frequently_used
    }

    input ServicesItemNoteCategoryOrderInput {
      sort: sortEnum = asc
      field: ServicesItemNoteCategoryOrderByEnum
    }

    
    

    type ServicesItemNoteCategoryAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        deleted_at: String
      

        """ example: string """
        name: String
      

        """ example: 1 """
        sequence: Int
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: true """
        frequently_used: Boolean
      
    }

    type ServicesItemNoteCategory {
      id: ID!
      attributes: ServicesItemNoteCategoryAttributes
      
    }
  

    enum ServicesItemTimeOrderByEnum {
      id
live_start_at
live_end_at
exclude
length
length_offset
    }

    input ServicesItemTimeOrderInput {
      sort: sortEnum = asc
      field: ServicesItemTimeOrderByEnum
    }

    
    

    type ServicesItemTimeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        live_start_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        live_end_at: String
      

        """ example: true """
        exclude: Boolean
      

        """ example: 1 """
        length: Int
      

        """ example: 1 """
        length_offset: Int
      
    }

    type ServicesItemTime {
      id: ID!
      attributes: ServicesItemTimeAttributes
      
    }
  

    enum ServicesKeyOrderByEnum {
      id
created_at
updated_at
name
alternate_keys
ending_key
starting_key
starting_minor
ending_minor
    }

    input ServicesKeyOrderInput {
      sort: sortEnum = asc
      field: ServicesKeyOrderByEnum
    }

    
    
      type ServicesKeyRelationships {
        ServicesAttachments: [ServicesAttachment]
      }
    

    type ServicesKeyAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        name: String
      

        """ example: string """
        alternate_keys: String
      

        """ example: string """
        ending_key: String
      

        """ example: string """
        starting_key: String
      

        """ example: true """
        starting_minor: Boolean
      

        """ example: true """
        ending_minor: Boolean
      
    }

    type ServicesKey {
      id: ID!
      attributes: ServicesKeyAttributes
      relationships: ServicesKeyRelationships
    }
  

    enum ServicesLayoutOrderByEnum {
      id
    }

    input ServicesLayoutOrderInput {
      sort: sortEnum = asc
      field: ServicesLayoutOrderByEnum
    }

    
    

    type ServicesLayoutAttributes {
      
        """ example: primary_key """
        id: ID!
      
    }

    type ServicesLayout {
      id: ID!
      attributes: ServicesLayoutAttributes
      
    }
  

    enum ServicesLiveOrderByEnum {
      id
series_title
title
dates
live_channel
chat_room_channel
can_control
can_take_control
can_chat
can_control_video_feed
    }

    input ServicesLiveOrderInput {
      sort: sortEnum = asc
      field: ServicesLiveOrderByEnum
    }

    
    
      type ServicesLiveRelationships {
        ServicesController: [ServicesPerson]
ServicesCurrent_item_time: [ServicesItemTime]
ServicesItems: [ServicesItem]
ServicesNext_item_time: [ServicesItemTime]
ServicesService_type: [ServicesServiceType]
ServicesWatchable_plans: [ServicesPlan]
      }
    

    type ServicesLiveAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        series_title: String
      

        """ example: string """
        title: String
      

        """ example: string """
        dates: String
      

        """ example: string """
        live_channel: String
      

        """ example: string """
        chat_room_channel: String
      

        """ example: true """
        can_control: Boolean
      

        """ example: true """
        can_take_control: Boolean
      

        """ example: true """
        can_chat: Boolean
      

        """ example: true """
        can_control_video_feed: Boolean
      
    }

    type ServicesLive {
      id: ID!
      attributes: ServicesLiveAttributes
      relationships: ServicesLiveRelationships
    }
  

    enum ServicesLiveControllerOrderByEnum {
      id
created_at
updated_at
full_name
photo_thumbnail_url
    }

    input ServicesLiveControllerOrderInput {
      sort: sortEnum = asc
      field: ServicesLiveControllerOrderByEnum
    }

    
    

    type ServicesLiveControllerAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        full_name: String
      

        """ example: string """
        photo_thumbnail_url: String
      
    }

    type ServicesLiveController {
      id: ID!
      attributes: ServicesLiveControllerAttributes
      
    }
  

    enum ServicesMediaOrderByEnum {
      id
created_at
updated_at
themes
title
thumbnail_file_name
thumbnail_content_type
thumbnail_file_size
thumbnail_updated_at
preview_file_name
preview_content_type
preview_file_size
preview_updated_at
length
media_type
media_type_name
thumbnail_url
creator_name
preview_url
image_url
    }

    input ServicesMediaOrderInput {
      sort: sortEnum = asc
      field: ServicesMediaOrderByEnum
    }

    
      input ServicesMediaWhereAttributes {
        creator_name: String
id: ID!
themes: String
title: String
      }
    
    
      type ServicesMediaRelationships {
        ServicesAttachments: [ServicesAttachment]
ServicesMedia_schedules: [ServicesMediaSchedule]
ServicesTags: [ServicesTag]
      }
    

    type ServicesMediaAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        themes: String
      

        """ example: string """
        title: String
      

        """ example: string """
        thumbnail_file_name: String
      

        """ example: string """
        thumbnail_content_type: String
      

        """ example: 1 """
        thumbnail_file_size: Int
      

        """ example: 2000-01-01T12:00:00Z """
        thumbnail_updated_at: String
      

        """ example: string """
        preview_file_name: String
      

        """ example: string """
        preview_content_type: String
      

        """ example: 1 """
        preview_file_size: Int
      

        """ example: 2000-01-01T12:00:00Z """
        preview_updated_at: String
      

        """ example: 1 """
        length: Int
      

        """ example: string """
        media_type: String
      

        """ example: string """
        media_type_name: String
      

        """ example: string """
        thumbnail_url: String
      

        """ example: string """
        creator_name: String
      

        """ example: string """
        preview_url: String
      

        """ example: string """
        image_url: String
      
    }

    type ServicesMedia {
      id: ID!
      attributes: ServicesMediaAttributes
      relationships: ServicesMediaRelationships
    }
  

    enum ServicesMediaScheduleOrderByEnum {
      id
plan_dates
plan_short_dates
service_type_name
plan_sort_date
    }

    input ServicesMediaScheduleOrderInput {
      sort: sortEnum = asc
      field: ServicesMediaScheduleOrderByEnum
    }

    
    

    type ServicesMediaScheduleAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        plan_dates: String
      

        """ example: string """
        plan_short_dates: String
      

        """ example: string """
        service_type_name: String
      

        """ example: 2000-01-01T12:00:00Z """
        plan_sort_date: String
      
    }

    type ServicesMediaSchedule {
      id: ID!
      attributes: ServicesMediaScheduleAttributes
      
    }
  

    enum ServicesNeededPositionOrderByEnum {
      id
quantity
team_position_name
scheduled_to
    }

    input ServicesNeededPositionOrderInput {
      sort: sortEnum = asc
      field: ServicesNeededPositionOrderByEnum
    }

    
    
      type ServicesNeededPositionRelationships {
        ServicesTeam: [ServicesTeam]
ServicesTime: [ServicesPlanTime]
      }
    

    type ServicesNeededPositionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        quantity: Int
      

        """ example: string """
        team_position_name: String
      

        """ example: string """
        scheduled_to: String
      
    }

    type ServicesNeededPosition {
      id: ID!
      attributes: ServicesNeededPositionAttributes
      relationships: ServicesNeededPositionRelationships
    }
  

    enum ServicesOrganizationOrderByEnum {
      id
ccli
created_at
date_format
music_stand_enabled
name
projector_enabled
time_zone
twenty_four_hour_time
updated_at
owner_name
required_to_set_download_permission
secret
allow_mp3_download
calendar_starts_on_sunday
ccli_connected
ccli_auto_reporting_enabled
ccli_reporting_enabled
extra_file_storage_allowed
file_storage_exceeded
file_storage_size
file_storage_size_used
file_storage_extra_enabled
rehearsal_mix_enabled
rehearsal_pack_connected
legacy_id
file_storage_extra_charges
people_allowed
people_remaining
beta
    }

    input ServicesOrganizationOrderInput {
      sort: sortEnum = asc
      field: ServicesOrganizationOrderByEnum
    }

    
    
      type ServicesOrganizationRelationships {
        ServicesAttachment_types: [ServicesAttachmentType]
ServicesChat: [ServicesChat]
ServicesEmail_templates: [ServicesEmailTemplate]
ServicesFolders: [ServicesFolder]
ServicesMedia: [ServicesMedia]
ServicesPeople: [ServicesPerson]
ServicesPlans: [ServicesOrganization]
ServicesReport_templates: [ServicesReportTemplate]
ServicesSeries: [ServicesSeries]
ServicesService_types: [ServicesServiceType]
ServicesSongs: [ServicesSong]
ServicesTag_groups: [ServicesTagGroup]
ServicesTeams: [ServicesTeam]
      }
    

    type ServicesOrganizationAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        ccli: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 1 """
        date_format: Int
      

        """ example: true """
        music_stand_enabled: Boolean
      

        """ example: string """
        name: String
      

        """ example: true """
        projector_enabled: Boolean
      

        """ example: string """
        time_zone: String
      

        """ example: true """
        twenty_four_hour_time: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        owner_name: String
      

        """ example: string """
        required_to_set_download_permission: String
      

        """ example: string """
        secret: String
      

        """ example: true """
        allow_mp3_download: Boolean
      

        """ example: true """
        calendar_starts_on_sunday: Boolean
      

        """ example: true """
        ccli_connected: Boolean
      

        """ example: true """
        ccli_auto_reporting_enabled: Boolean
      

        """ example: true """
        ccli_reporting_enabled: Boolean
      

        """ example: true """
        extra_file_storage_allowed: Boolean
      

        """ example: true """
        file_storage_exceeded: Boolean
      

        """ example: true """
        file_storage_size: Boolean
      

        """ example: true """
        file_storage_size_used: Boolean
      

        """ example: true """
        file_storage_extra_enabled: Boolean
      

        """ example: true """
        rehearsal_mix_enabled: Boolean
      

        """ example: true """
        rehearsal_pack_connected: Boolean
      

        """ example: primary_key """
        legacy_id: ID!
      

        """ example: 1 """
        file_storage_extra_charges: Int
      

        """ example: 1 """
        people_allowed: Int
      

        """ example: 1 """
        people_remaining: Int
      

        """ example: true """
        beta: Boolean
      
    }

    type ServicesOrganization {
      id: ID!
      attributes: ServicesOrganizationAttributes
      relationships: ServicesOrganizationRelationships
    }
  

    enum ServicesPersonOrderByEnum {
      id
photo_url
photo_thumbnail_url
preferred_app
assigned_to_rehearsal_team
archived_at
created_at
first_name
last_name
name_prefix
name_suffix
updated_at
facebook_id
legacy_id
full_name
max_permissions
permissions
status
anniversary
birthdate
given_name
middle_name
nickname
access_media_attachments
access_plan_attachments
access_song_attachments
archived
site_administrator
logged_in_at
notes
passed_background_check
ical_code
preferred_max_plans_per_day
preferred_max_plans_per_month
praise_charts_enabled
me_tab
plans_tab
songs_tab
media_tab
people_tab
can_edit_all_people
can_view_all_people
onboardings
    }

    input ServicesPersonOrderInput {
      sort: sortEnum = asc
      field: ServicesPersonOrderByEnum
    }

    
      input ServicesPersonWhereAttributes {
        assigned_to_rehearsal_team: Boolean
legacy_id: ID!
      }
    
    
      type ServicesPersonRelationships {
        ServicesAvailable_signups: [ServicesAvailableSignup]
ServicesBlockouts: [ServicesBlockout]
ServicesEmails: [ServicesEmail]
ServicesPerson_team_position_assignments: [ServicesPersonTeamPositionAssignment]
ServicesPlan_people: [ServicesPlanPerson]
ServicesSchedules: [ServicesSchedule]
ServicesScheduling_preferences: [ServicesSchedulingPreference]
ServicesTags: [ServicesTag]
ServicesTeam_leaders: [ServicesTeamLeader]
ServicesText_settings: [ServicesTextSetting]
      }
    

    type ServicesPersonAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        photo_url: String
      

        """ example: string """
        photo_thumbnail_url: String
      

        """ example: string """
        preferred_app: String
      

        """ example: true """
        assigned_to_rehearsal_team: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        archived_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        first_name: String
      

        """ example: string """
        last_name: String
      

        """ example: string """
        name_prefix: String
      

        """ example: string """
        name_suffix: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: primary_key """
        facebook_id: ID!
      

        """ example: primary_key """
        legacy_id: ID!
      

        """ example: string """
        full_name: String
      

        """ example: string """
        max_permissions: String
      

        """ example: string """
        permissions: String
      

        """ example: string """
        status: String
      

        """ example: 2000-01-01T12:00:00Z """
        anniversary: String
      

        """ example: 2000-01-01T12:00:00Z """
        birthdate: String
      

        """ example: string """
        given_name: String
      

        """ example: string """
        middle_name: String
      

        """ example: string """
        nickname: String
      

        """ example: true """
        access_media_attachments: Boolean
      

        """ example: true """
        access_plan_attachments: Boolean
      

        """ example: true """
        access_song_attachments: Boolean
      

        """ example: true """
        archived: Boolean
      

        """ example: true """
        site_administrator: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        logged_in_at: String
      

        """ example: string """
        notes: String
      

        """ example: true """
        passed_background_check: Boolean
      

        """ example: string """
        ical_code: String
      

        """ example: 1 """
        preferred_max_plans_per_day: Int
      

        """ example: 1 """
        preferred_max_plans_per_month: Int
      

        """ example: true """
        praise_charts_enabled: Boolean
      

        """ example: string """
        me_tab: String
      

        """ example: string """
        plans_tab: String
      

        """ example: string """
        songs_tab: String
      

        """ example: string """
        media_tab: String
      

        """ example: string """
        people_tab: String
      

        """ example: true """
        can_edit_all_people: Boolean
      

        """ example: true """
        can_view_all_people: Boolean
      

        """ example:  """
        onboardings: String
      
    }

    type ServicesPerson {
      id: ID!
      attributes: ServicesPersonAttributes
      relationships: ServicesPersonRelationships
    }
  

    enum ServicesPersonTeamPositionAssignmentOrderByEnum {
      id
created_at
updated_at
schedule_preference
preferred_weeks
    }

    input ServicesPersonTeamPositionAssignmentOrderInput {
      sort: sortEnum = asc
      field: ServicesPersonTeamPositionAssignmentOrderByEnum
    }

    
    
      type ServicesPersonTeamPositionAssignmentRelationships {
        ServicesPerson: [ServicesPerson]
ServicesTeam_position: [ServicesTeamPosition]
      }
    

    type ServicesPersonTeamPositionAssignmentAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        schedule_preference: String
      

        """ example:  """
        preferred_weeks: String
      
    }

    type ServicesPersonTeamPositionAssignment {
      id: ID!
      attributes: ServicesPersonTeamPositionAssignmentAttributes
      relationships: ServicesPersonTeamPositionAssignmentRelationships
    }
  

    enum ServicesPlanOrderByEnum {
      id
created_at
title
updated_at
public
series_title
plan_notes_count
other_time_count
rehearsal_time_count
service_time_count
plan_people_count
needed_positions_count
items_count
total_length
can_view_order
multi_day
prefers_order_view
rehearsable
files_expire_at
sort_date
last_time_at
permissions
dates
short_dates
planning_center_url
reminders_disabled
    }

    input ServicesPlanOrderInput {
      sort: sortEnum = asc
      field: ServicesPlanOrderByEnum
    }

    
      input ServicesPlanWhereAttributes {
        created_at: String
id: ID!
series_title: String
title: String
updated_at: String
      }
    
    
      type ServicesPlanRelationships {
        ServicesAll_attachments: [ServicesAttachment]
ServicesAttachments: [ServicesAttachment]
ServicesAttendances: [ServicesAttendance]
ServicesContributors: [ServicesContributor]
ServicesItems: [ServicesItem]
ServicesLive: [ServicesLive]
ServicesMy_schedules: [ServicesSchedule]
ServicesNeeded_positions: [ServicesNeededPosition]
ServicesNext_plan: [ServicesPlan]
ServicesNotes: [ServicesPlanNote]
ServicesPlan_times: [ServicesPlanTime]
ServicesPrevious_plan: [ServicesPlan]
ServicesSeries: [ServicesSeries]
ServicesSignup_teams: [ServicesTeam]
ServicesTeam_members: [ServicesPlanPerson]
      }
    

    type ServicesPlanAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: string """
        title: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: true """
        public: Boolean
      

        """ example: string """
        series_title: String
      

        """ example: 1 """
        plan_notes_count: Int
      

        """ example: 1 """
        other_time_count: Int
      

        """ example: 1 """
        rehearsal_time_count: Int
      

        """ example: 1 """
        service_time_count: Int
      

        """ example: 1 """
        plan_people_count: Int
      

        """ example: 1 """
        needed_positions_count: Int
      

        """ example: 1 """
        items_count: Int
      

        """ example: 1 """
        total_length: Int
      

        """ example: true """
        can_view_order: Boolean
      

        """ example: true """
        multi_day: Boolean
      

        """ example: true """
        prefers_order_view: Boolean
      

        """ example: true """
        rehearsable: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        files_expire_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        sort_date: String
      

        """ example: 2000-01-01T12:00:00Z """
        last_time_at: String
      

        """ example: string """
        permissions: String
      

        """ example: string """
        dates: String
      

        """ example: string """
        short_dates: String
      

        """ example: string """
        planning_center_url: String
      

        """ example: true """
        reminders_disabled: Boolean
      
    }

    type ServicesPlan {
      id: ID!
      attributes: ServicesPlanAttributes
      relationships: ServicesPlanRelationships
    }
  

    enum ServicesPlanNoteOrderByEnum {
      id
created_at
updated_at
category_name
content
    }

    input ServicesPlanNoteOrderInput {
      sort: sortEnum = asc
      field: ServicesPlanNoteOrderByEnum
    }

    
      input ServicesPlanNoteWhereAttributes {
        created_at: String
updated_at: String
      }
    
    
      type ServicesPlanNoteRelationships {
        ServicesPlan_note_category: [ServicesPlanNoteCategory]
      }
    

    type ServicesPlanNoteAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        category_name: String
      

        """ example: string """
        content: String
      
    }

    type ServicesPlanNote {
      id: ID!
      attributes: ServicesPlanNoteAttributes
      relationships: ServicesPlanNoteRelationships
    }
  

    enum ServicesPlanNoteCategoryOrderByEnum {
      id
created_at
deleted_at
name
sequence
updated_at
    }

    input ServicesPlanNoteCategoryOrderInput {
      sort: sortEnum = asc
      field: ServicesPlanNoteCategoryOrderByEnum
    }

    
    

    type ServicesPlanNoteCategoryAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        deleted_at: String
      

        """ example: string """
        name: String
      

        """ example: 1 """
        sequence: Int
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type ServicesPlanNoteCategory {
      id: ID!
      attributes: ServicesPlanNoteCategoryAttributes
      
    }
  

    enum ServicesPlanPersonOrderByEnum {
      id
status
created_at
updated_at
notes
decline_reason
name
notification_changed_by_name
notification_sender_name
team_position_name
photo_thumbnail
scheduled_by_name
status_updated_at
notification_changed_at
notification_prepared_at
notification_read_at
notification_sent_at
prepare_notification
can_accept_partial
    }

    input ServicesPlanPersonOrderInput {
      sort: sortEnum = asc
      field: ServicesPlanPersonOrderByEnum
    }

    
    
      type ServicesPlanPersonRelationships {
        ServicesDeclined_plan_times: [ServicesPlanTime]
ServicesPerson: [ServicesPerson]
ServicesPlan: [ServicesPlan]
ServicesPlan_person_times: [ServicesPlanPersonTime]
ServicesPlan_times: [ServicesPlanTime]
ServicesTeam: [ServicesTeam]
      }
    

    type ServicesPlanPersonAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        status: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        notes: String
      

        """ example: string """
        decline_reason: String
      

        """ example: string """
        name: String
      

        """ example: string """
        notification_changed_by_name: String
      

        """ example: string """
        notification_sender_name: String
      

        """ example: string """
        team_position_name: String
      

        """ example: string """
        photo_thumbnail: String
      

        """ example: string """
        scheduled_by_name: String
      

        """ example: 2000-01-01T12:00:00Z """
        status_updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        notification_changed_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        notification_prepared_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        notification_read_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        notification_sent_at: String
      

        """ example: true """
        prepare_notification: Boolean
      

        """ example: true """
        can_accept_partial: Boolean
      
    }

    type ServicesPlanPerson {
      id: ID!
      attributes: ServicesPlanPersonAttributes
      relationships: ServicesPlanPersonRelationships
    }
  

    enum ServicesPlanPersonTimeOrderByEnum {
      id
status
created_at
updated_at
    }

    input ServicesPlanPersonTimeOrderInput {
      sort: sortEnum = asc
      field: ServicesPlanPersonTimeOrderByEnum
    }

    
    

    type ServicesPlanPersonTimeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        status: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      
    }

    type ServicesPlanPersonTime {
      id: ID!
      attributes: ServicesPlanPersonTimeAttributes
      
    }
  

    enum ServicesPlanTemplateOrderByEnum {
      id
name
created_at
updated_at
item_count
team_count
note_count
can_view_order
multi_day
prefers_order_view
rehearsable
    }

    input ServicesPlanTemplateOrderInput {
      sort: sortEnum = asc
      field: ServicesPlanTemplateOrderByEnum
    }

    
    
      type ServicesPlanTemplateRelationships {
        ServicesItems: [ServicesItem]
ServicesNotes: [ServicesPlanNote]
      }
    

    type ServicesPlanTemplateAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 1 """
        item_count: Int
      

        """ example: 1 """
        team_count: Int
      

        """ example: 1 """
        note_count: Int
      

        """ example: true """
        can_view_order: Boolean
      

        """ example: true """
        multi_day: Boolean
      

        """ example: true """
        prefers_order_view: Boolean
      

        """ example: true """
        rehearsable: Boolean
      
    }

    type ServicesPlanTemplate {
      id: ID!
      attributes: ServicesPlanTemplateAttributes
      relationships: ServicesPlanTemplateRelationships
    }
  

    enum ServicesPlanTimeOrderByEnum {
      id
created_at
updated_at
name
time_type
recorded
team_reminders
starts_at
ends_at
live_starts_at
live_ends_at
    }

    input ServicesPlanTimeOrderInput {
      sort: sortEnum = asc
      field: ServicesPlanTimeOrderByEnum
    }

    
      input ServicesPlanTimeWhereAttributes {
        time_type: String
      }
    
    
      type ServicesPlanTimeRelationships {
        ServicesSplit_team_rehearsal_assignments: [ServicesSplitTeamRehearsalAssignment]
      }
    

    type ServicesPlanTimeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        name: String
      

        """ example: string """
        time_type: String
      

        """ example: true """
        recorded: Boolean
      

        """ example:  """
        team_reminders: String
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        ends_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        live_starts_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        live_ends_at: String
      
    }

    type ServicesPlanTime {
      id: ID!
      attributes: ServicesPlanTimeAttributes
      relationships: ServicesPlanTimeRelationships
    }
  

    enum ServicesPublicViewOrderByEnum {
      id
series_artwork
series_and_plan_titles
item_lengths
service_times
song_items
media_items
regular_items
headers
itunes
amazon
spotify
youtube
vimeo
    }

    input ServicesPublicViewOrderInput {
      sort: sortEnum = asc
      field: ServicesPublicViewOrderByEnum
    }

    
    

    type ServicesPublicViewAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        series_artwork: Boolean
      

        """ example: true """
        series_and_plan_titles: Boolean
      

        """ example: true """
        item_lengths: Boolean
      

        """ example: true """
        service_times: Boolean
      

        """ example: true """
        song_items: Boolean
      

        """ example: true """
        media_items: Boolean
      

        """ example: true """
        regular_items: Boolean
      

        """ example: true """
        headers: Boolean
      

        """ example: true """
        itunes: Boolean
      

        """ example: true """
        amazon: Boolean
      

        """ example: true """
        spotify: Boolean
      

        """ example: true """
        youtube: Boolean
      

        """ example: true """
        vimeo: Boolean
      
    }

    type ServicesPublicView {
      id: ID!
      attributes: ServicesPublicViewAttributes
      
    }
  

    enum ServicesReportTemplateOrderByEnum {
      id
body
title
type
default
    }

    input ServicesReportTemplateOrderInput {
      sort: sortEnum = asc
      field: ServicesReportTemplateOrderByEnum
    }

    
    

    type ServicesReportTemplateAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        body: String
      

        """ example: string """
        title: String
      

        """ example: string """
        type: String
      

        """ example: true """
        default: Boolean
      
    }

    type ServicesReportTemplate {
      id: ID!
      attributes: ServicesReportTemplateAttributes
      
    }
  

    enum ServicesScheduleOrderByEnum {
      id
sort_date
dates
decline_reason
organization_name
organization_time_zone
organization_twenty_four_hour_time
person_name
position_display_times
responds_to_name
service_type_name
short_dates
status
team_name
team_position_name
can_accept_partial
can_accept_partial_one_time
can_rehearse
plan_visible
plan_visible_to_me
    }

    input ServicesScheduleOrderInput {
      sort: sortEnum = asc
      field: ServicesScheduleOrderByEnum
    }

    
    
      type ServicesScheduleRelationships {
        ServicesDeclined_plan_times: [ServicesPlanTime]
ServicesPlan_times: [ServicesPlanTime]
ServicesRespond_to: [ServicesPerson]
ServicesTeam: [ServicesTeam]
      }
    

    type ServicesScheduleAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        sort_date: String
      

        """ example: string """
        dates: String
      

        """ example: string """
        decline_reason: String
      

        """ example: string """
        organization_name: String
      

        """ example: string """
        organization_time_zone: String
      

        """ example: string """
        organization_twenty_four_hour_time: String
      

        """ example: string """
        person_name: String
      

        """ example: string """
        position_display_times: String
      

        """ example: string """
        responds_to_name: String
      

        """ example: string """
        service_type_name: String
      

        """ example: string """
        short_dates: String
      

        """ example: string """
        status: String
      

        """ example: string """
        team_name: String
      

        """ example: string """
        team_position_name: String
      

        """ example: true """
        can_accept_partial: Boolean
      

        """ example: true """
        can_accept_partial_one_time: Boolean
      

        """ example: true """
        can_rehearse: Boolean
      

        """ example: true """
        plan_visible: Boolean
      

        """ example: true """
        plan_visible_to_me: Boolean
      
    }

    type ServicesSchedule {
      id: ID!
      attributes: ServicesScheduleAttributes
      relationships: ServicesScheduleRelationships
    }
  

    enum ServicesScheduledPersonOrderByEnum {
      id
full_name
status
thumbnail
    }

    input ServicesScheduledPersonOrderInput {
      sort: sortEnum = asc
      field: ServicesScheduledPersonOrderByEnum
    }

    
    

    type ServicesScheduledPersonAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        full_name: String
      

        """ example: string """
        status: String
      

        """ example: string """
        thumbnail: String
      
    }

    type ServicesScheduledPerson {
      id: ID!
      attributes: ServicesScheduledPersonAttributes
      
    }
  

    enum ServicesSchedulingPreferenceOrderByEnum {
      id
preference
    }

    input ServicesSchedulingPreferenceOrderInput {
      sort: sortEnum = asc
      field: ServicesSchedulingPreferenceOrderByEnum
    }

    
    

    type ServicesSchedulingPreferenceAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        preference: String
      
    }

    type ServicesSchedulingPreference {
      id: ID!
      attributes: ServicesSchedulingPreferenceAttributes
      
    }
  

    enum ServicesSeriesOrderByEnum {
      id
created_at
updated_at
artwork_file_name
artwork_content_type
artwork_file_size
title
artwork_for_dashboard
artwork_for_mobile
artwork_for_plan
artwork_original
has_artwork
    }

    input ServicesSeriesOrderInput {
      sort: sortEnum = asc
      field: ServicesSeriesOrderByEnum
    }

    
      input ServicesSeriesWhereAttributes {
        title: String
      }
    
    
      type ServicesSeriesRelationships {
        ServicesPlans: [ServicesPlan]
      }
    

    type ServicesSeriesAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        artwork_file_name: String
      

        """ example: string """
        artwork_content_type: String
      

        """ example: 1 """
        artwork_file_size: Int
      

        """ example: string """
        title: String
      

        """ example: string """
        artwork_for_dashboard: String
      

        """ example: string """
        artwork_for_mobile: String
      

        """ example: string """
        artwork_for_plan: String
      

        """ example: string """
        artwork_original: String
      

        """ example: true """
        has_artwork: Boolean
      
    }

    type ServicesSeries {
      id: ID!
      attributes: ServicesSeriesAttributes
      relationships: ServicesSeriesRelationships
    }
  

    enum ServicesServiceTypeOrderByEnum {
      id
archived_at
created_at
deleted_at
name
sequence
updated_at
permissions
attachment_types_enabled
custom_item_types
standard_item_types
background_check_permissions
comment_permissions
frequency
last_plan_from
    }

    input ServicesServiceTypeOrderInput {
      sort: sortEnum = asc
      field: ServicesServiceTypeOrderByEnum
    }

    
      input ServicesServiceTypeWhereAttributes {
        id: ID!
name: String
      }
    
    
      type ServicesServiceTypeRelationships {
        ServicesAttachments: [ServicesAttachment]
ServicesItem_note_categories: [ServicesItemNoteCategory]
ServicesLayouts: [ServicesLayout]
ServicesLive_controllers: [ServicesLiveController]
ServicesPlan_note_categories: [ServicesPlanNoteCategory]
ServicesPlan_templates: [ServicesPlanTemplate]
ServicesPlan_times: [ServicesPlanTime]
ServicesPlans: [ServicesPlan]
ServicesPublic_view: [ServicesPublicView]
ServicesTeam_positions: [ServicesTeamPosition]
ServicesTeams: [ServicesTeam]
ServicesTime_preference_options: [ServicesTimePreferenceOption]
ServicesUnscoped_plans: [ServicesPlan]
      }
    

    type ServicesServiceTypeAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        archived_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        deleted_at: String
      

        """ example: string """
        name: String
      

        """ example: 1 """
        sequence: Int
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        permissions: String
      

        """ example: true """
        attachment_types_enabled: Boolean
      

        """ example:  """
        custom_item_types: String
      

        """ example:  """
        standard_item_types: String
      

        """ example: string """
        background_check_permissions: String
      

        """ example: string """
        comment_permissions: String
      

        """ example: string """
        frequency: String
      

        """ example: string """
        last_plan_from: String
      
    }

    type ServicesServiceType {
      id: ID!
      attributes: ServicesServiceTypeAttributes
      relationships: ServicesServiceTypeRelationships
    }
  

    enum ServicesServiceTypePathOrderByEnum {
      id
path
    }

    input ServicesServiceTypePathOrderInput {
      sort: sortEnum = asc
      field: ServicesServiceTypePathOrderByEnum
    }

    
    

    type ServicesServiceTypePathAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example:  """
        path: String
      
    }

    type ServicesServiceTypePath {
      id: ID!
      attributes: ServicesServiceTypePathAttributes
      
    }
  

    enum ServicesSignupSheetOrderByEnum {
      id
sort_date
group_key
team_name
display_times
position_name
title
sort_index
    }

    input ServicesSignupSheetOrderInput {
      sort: sortEnum = asc
      field: ServicesSignupSheetOrderByEnum
    }

    
    
      type ServicesSignupSheetRelationships {
        ServicesScheduled_people: [ServicesScheduledPerson]
ServicesSignup_sheet_metadata: [ServicesSignupSheetMetadata]
      }
    

    type ServicesSignupSheetAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 2000-01-01T12:00:00Z """
        sort_date: String
      

        """ example: string """
        group_key: String
      

        """ example: string """
        team_name: String
      

        """ example: string """
        display_times: String
      

        """ example: string """
        position_name: String
      

        """ example: string """
        title: String
      

        """ example: 1 """
        sort_index: Int
      
    }

    type ServicesSignupSheet {
      id: ID!
      attributes: ServicesSignupSheetAttributes
      relationships: ServicesSignupSheetRelationships
    }
  

    enum ServicesSignupSheetMetadataOrderByEnum {
      id
conflicts
time_type
time_name
ends_at
starts_at
    }

    input ServicesSignupSheetMetadataOrderInput {
      sort: sortEnum = asc
      field: ServicesSignupSheetMetadataOrderByEnum
    }

    
    

    type ServicesSignupSheetMetadataAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: [object Object] """
        conflicts: String
      

        """ example: string """
        time_type: String
      

        """ example: string """
        time_name: String
      

        """ example: 2000-01-01T12:00:00Z """
        ends_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      
    }

    type ServicesSignupSheetMetadata {
      id: ID!
      attributes: ServicesSignupSheetMetadataAttributes
      
    }
  

    enum ServicesSkippedAttachmentOrderByEnum {
      id
skipped
    }

    input ServicesSkippedAttachmentOrderInput {
      sort: sortEnum = asc
      field: ServicesSkippedAttachmentOrderByEnum
    }

    
    

    type ServicesSkippedAttachmentAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        skipped: Boolean
      
    }

    type ServicesSkippedAttachment {
      id: ID!
      attributes: ServicesSkippedAttachmentAttributes
      
    }
  

    enum ServicesSongOrderByEnum {
      id
title
created_at
updated_at
admin
author
copyright
hidden
notes
themes
last_scheduled_short_dates
last_scheduled_at
ccli_number
    }

    input ServicesSongOrderInput {
      sort: sortEnum = asc
      field: ServicesSongOrderByEnum
    }

    
      input ServicesSongWhereAttributes {
        author: String
ccli_number: Int
hidden: Boolean
themes: String
title: String
      }
    
    
      type ServicesSongRelationships {
        ServicesArrangements: [ServicesArrangement]
ServicesAttachments: [ServicesAttachment]
ServicesLast_scheduled_item: [ServicesItem]
ServicesSong_schedules: [ServicesSongSchedule]
ServicesTags: [ServicesTag]
      }
    

    type ServicesSongAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        title: String
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        admin: String
      

        """ example: string """
        author: String
      

        """ example: string """
        copyright: String
      

        """ example: true """
        hidden: Boolean
      

        """ example: string """
        notes: String
      

        """ example: string """
        themes: String
      

        """ example: string """
        last_scheduled_short_dates: String
      

        """ example: 2000-01-01T12:00:00Z """
        last_scheduled_at: String
      

        """ example: 1 """
        ccli_number: Int
      
    }

    type ServicesSong {
      id: ID!
      attributes: ServicesSongAttributes
      relationships: ServicesSongRelationships
    }
  

    enum ServicesSongScheduleOrderByEnum {
      id
arrangement_name
key_name
plan_dates
service_type_name
plan_sort_date
    }

    input ServicesSongScheduleOrderInput {
      sort: sortEnum = asc
      field: ServicesSongScheduleOrderByEnum
    }

    
    

    type ServicesSongScheduleAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        arrangement_name: String
      

        """ example: string """
        key_name: String
      

        """ example: string """
        plan_dates: String
      

        """ example: string """
        service_type_name: String
      

        """ example: string """
        plan_sort_date: String
      
    }

    type ServicesSongSchedule {
      id: ID!
      attributes: ServicesSongScheduleAttributes
      
    }
  

    enum ServicesSongbookStatusOrderByEnum {
      id
status
status_code
status_token
url
    }

    input ServicesSongbookStatusOrderInput {
      sort: sortEnum = asc
      field: ServicesSongbookStatusOrderByEnum
    }

    
    

    type ServicesSongbookStatusAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        status: String
      

        """ example: string """
        status_code: String
      

        """ example: string """
        status_token: String
      

        """ example: string """
        url: String
      
    }

    type ServicesSongbookStatus {
      id: ID!
      attributes: ServicesSongbookStatusAttributes
      
    }
  

    enum ServicesSplitTeamRehearsalAssignmentOrderByEnum {
      id
schedule_special_service_times
    }

    input ServicesSplitTeamRehearsalAssignmentOrderInput {
      sort: sortEnum = asc
      field: ServicesSplitTeamRehearsalAssignmentOrderByEnum
    }

    
    
      type ServicesSplitTeamRehearsalAssignmentRelationships {
        ServicesTeam: [ServicesTeam]
      }
    

    type ServicesSplitTeamRehearsalAssignmentAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        schedule_special_service_times: Boolean
      
    }

    type ServicesSplitTeamRehearsalAssignment {
      id: ID!
      attributes: ServicesSplitTeamRehearsalAssignmentAttributes
      relationships: ServicesSplitTeamRehearsalAssignmentRelationships
    }
  

    enum ServicesTagOrderByEnum {
      id
name
    }

    input ServicesTagOrderInput {
      sort: sortEnum = asc
      field: ServicesTagOrderByEnum
    }

    
    

    type ServicesTagAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      
    }

    type ServicesTag {
      id: ID!
      attributes: ServicesTagAttributes
      
    }
  

    enum ServicesTagGroupOrderByEnum {
      id
name
required
allow_multiple_selections
tags_for
service_type_folder_name
    }

    input ServicesTagGroupOrderInput {
      sort: sortEnum = asc
      field: ServicesTagGroupOrderByEnum
    }

    
      input ServicesTagGroupWhereAttributes {
        name: String
tags_for: String
      }
    
    
      type ServicesTagGroupRelationships {
        ServicesFolder: [ServicesFolder]
ServicesTags: [ServicesTag]
      }
    

    type ServicesTagGroupAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: true """
        required: Boolean
      

        """ example: true """
        allow_multiple_selections: Boolean
      

        """ example: string """
        tags_for: String
      

        """ example: string """
        service_type_folder_name: String
      
    }

    type ServicesTagGroup {
      id: ID!
      attributes: ServicesTagGroupAttributes
      relationships: ServicesTagGroupRelationships
    }
  

    enum ServicesTeamOrderByEnum {
      id
name
rehearsal_team
sequence
schedule_to
default_status
default_prepare_notifications
created_at
updated_at
archived_at
viewers_see
assigned_directly
secure_team
last_plan_from
stage_color
stage_variant
    }

    input ServicesTeamOrderInput {
      sort: sortEnum = asc
      field: ServicesTeamOrderByEnum
    }

    
      input ServicesTeamWhereAttributes {
        name: String
      }
    
    
      type ServicesTeamRelationships {
        ServicesPeople: [ServicesPerson]
ServicesPerson_team_position_assignments: [ServicesPersonTeamPositionAssignment]
ServicesPlan_people: [ServicesPlanPerson]
ServicesService_type: [ServicesServiceType]
ServicesTeam_leaders: [ServicesTeamLeader]
ServicesTeam_positions: [ServicesTeamPosition]
      }
    

    type ServicesTeamAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: true """
        rehearsal_team: Boolean
      

        """ example: 1 """
        sequence: Int
      

        """ example: string """
        schedule_to: String
      

        """ example: string """
        default_status: String
      

        """ example: true """
        default_prepare_notifications: Boolean
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        archived_at: String
      

        """ example: 1 """
        viewers_see: Int
      

        """ example: true """
        assigned_directly: Boolean
      

        """ example: true """
        secure_team: Boolean
      

        """ example: string """
        last_plan_from: String
      

        """ example: string """
        stage_color: String
      

        """ example: string """
        stage_variant: String
      
    }

    type ServicesTeam {
      id: ID!
      attributes: ServicesTeamAttributes
      relationships: ServicesTeamRelationships
    }
  

    enum ServicesTeamLeaderOrderByEnum {
      id
send_responses_for_accepts
send_responses_for_declines
send_responses_for_blockouts
    }

    input ServicesTeamLeaderOrderInput {
      sort: sortEnum = asc
      field: ServicesTeamLeaderOrderByEnum
    }

    
    
      type ServicesTeamLeaderRelationships {
        ServicesPeople: [ServicesPerson]
ServicesTeam: [ServicesTeam]
      }
    

    type ServicesTeamLeaderAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        send_responses_for_accepts: Boolean
      

        """ example: true """
        send_responses_for_declines: Boolean
      

        """ example: true """
        send_responses_for_blockouts: Boolean
      
    }

    type ServicesTeamLeader {
      id: ID!
      attributes: ServicesTeamLeaderAttributes
      relationships: ServicesTeamLeaderRelationships
    }
  

    enum ServicesTeamPositionOrderByEnum {
      id
name
sequence
tags
negative_tag_groups
tag_groups
    }

    input ServicesTeamPositionOrderInput {
      sort: sortEnum = asc
      field: ServicesTeamPositionOrderByEnum
    }

    
    
      type ServicesTeamPositionRelationships {
        ServicesPerson_team_position_assignments: [ServicesPersonTeamPositionAssignment]
ServicesTags: [ServicesTag]
ServicesTeam: [ServicesTeam]
      }
    

    type ServicesTeamPositionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: string """
        name: String
      

        """ example: 1 """
        sequence: Int
      

        """ example:  """
        tags: String
      

        """ example:  """
        negative_tag_groups: String
      

        """ example:  """
        tag_groups: String
      
    }

    type ServicesTeamPosition {
      id: ID!
      attributes: ServicesTeamPositionAttributes
      relationships: ServicesTeamPositionRelationships
    }
  

    enum ServicesTextSettingOrderByEnum {
      id
scheduling_requests_enabled
general_emails_enabled
scheduling_replies_enabled
reminders_enabled
carrier
display_number
normalized_number
    }

    input ServicesTextSettingOrderInput {
      sort: sortEnum = asc
      field: ServicesTextSettingOrderByEnum
    }

    
    

    type ServicesTextSettingAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: true """
        scheduling_requests_enabled: Boolean
      

        """ example: true """
        general_emails_enabled: Boolean
      

        """ example: true """
        scheduling_replies_enabled: Boolean
      

        """ example: true """
        reminders_enabled: Boolean
      

        """ example: string """
        carrier: String
      

        """ example: string """
        display_number: String
      

        """ example: string """
        normalized_number: String
      
    }

    type ServicesTextSetting {
      id: ID!
      attributes: ServicesTextSettingAttributes
      
    }
  

    enum ServicesTimePreferenceOptionOrderByEnum {
      id
day_of_week
created_at
updated_at
description
sort_index
time_type
minute_of_day
starts_at
    }

    input ServicesTimePreferenceOptionOrderInput {
      sort: sortEnum = asc
      field: ServicesTimePreferenceOptionOrderByEnum
    }

    
    

    type ServicesTimePreferenceOptionAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1 """
        day_of_week: Int
      

        """ example: 2000-01-01T12:00:00Z """
        created_at: String
      

        """ example: 2000-01-01T12:00:00Z """
        updated_at: String
      

        """ example: string """
        description: String
      

        """ example: string """
        sort_index: String
      

        """ example: string """
        time_type: String
      

        """ example: 1 """
        minute_of_day: Int
      

        """ example: 2000-01-01T12:00:00Z """
        starts_at: String
      
    }

    type ServicesTimePreferenceOption {
      id: ID!
      attributes: ServicesTimePreferenceOptionAttributes
      
    }
  

    enum ServicesZoomOrderByEnum {
      id
aspect_ratio
zoom_level
x_offset
y_offset
    }

    input ServicesZoomOrderInput {
      sort: sortEnum = asc
      field: ServicesZoomOrderByEnum
    }

    
    

    type ServicesZoomAttributes {
      
        """ example: primary_key """
        id: ID!
      

        """ example: 1.42 """
        aspect_ratio: Int
      

        """ example: 1.42 """
        zoom_level: Int
      

        """ example: 1.42 """
        x_offset: Int
      

        """ example: 1.42 """
        y_offset: Int
      
    }

    type ServicesZoom {
      id: ID!
      attributes: ServicesZoomAttributes
      
    }
  
    type Query {
      
      CalendarAttachmentById(id: ID!): CalendarAttachment
      CalendarAttachment(
          limit: Int,
          where: CalendarAttachmentWhereAttributes,
          order: CalendarAttachmentOrderInput
      ): [CalendarAttachment!]
    

      CalendarConflictById(id: ID!): CalendarConflict
      CalendarConflict(
          limit: Int,
          
          order: CalendarConflictOrderInput
      ): [CalendarConflict!]
    

      CalendarEventById(id: ID!): CalendarEvent
      CalendarEvent(
          limit: Int,
          where: CalendarEventWhereAttributes,
          order: CalendarEventOrderInput
      ): [CalendarEvent!]
    

      CalendarEventInstanceById(id: ID!): CalendarEventInstance
      CalendarEventInstance(
          limit: Int,
          where: CalendarEventInstanceWhereAttributes,
          order: CalendarEventInstanceOrderInput
      ): [CalendarEventInstance!]
    

      CalendarEventResourceRequestById(id: ID!): CalendarEventResourceRequest
      CalendarEventResourceRequest(
          limit: Int,
          where: CalendarEventResourceRequestWhereAttributes,
          order: CalendarEventResourceRequestOrderInput
      ): [CalendarEventResourceRequest!]
    

      CalendarFeedById(id: ID!): CalendarFeed
      CalendarFeed(
          limit: Int,
          where: CalendarFeedWhereAttributes,
          order: CalendarFeedOrderInput
      ): [CalendarFeed!]
    

      CalendarJobStatusById(id: ID!): CalendarJobStatus
      CalendarJobStatus(
          limit: Int,
          
          order: CalendarJobStatusOrderInput
      ): [CalendarJobStatus!]
    

      CalendarPersonById(id: ID!): CalendarPerson
      CalendarPerson(
          limit: Int,
          where: CalendarPersonWhereAttributes,
          order: CalendarPersonOrderInput
      ): [CalendarPerson!]
    

      CalendarReportTemplateById(id: ID!): CalendarReportTemplate
      CalendarReportTemplate(
          limit: Int,
          
          order: CalendarReportTemplateOrderInput
      ): [CalendarReportTemplate!]
    

      CalendarResourceById(id: ID!): CalendarResource
      CalendarResource(
          limit: Int,
          where: CalendarResourceWhereAttributes,
          order: CalendarResourceOrderInput
      ): [CalendarResource!]
    

      CalendarResourceApprovalGroupById(id: ID!): CalendarResourceApprovalGroup
      CalendarResourceApprovalGroup(
          limit: Int,
          where: CalendarResourceApprovalGroupWhereAttributes,
          order: CalendarResourceApprovalGroupOrderInput
      ): [CalendarResourceApprovalGroup!]
    

      CalendarResourceBookingById(id: ID!): CalendarResourceBooking
      CalendarResourceBooking(
          limit: Int,
          where: CalendarResourceBookingWhereAttributes,
          order: CalendarResourceBookingOrderInput
      ): [CalendarResourceBooking!]
    

      CalendarResourceFolderById(id: ID!): CalendarResourceFolder
      CalendarResourceFolder(
          limit: Int,
          where: CalendarResourceFolderWhereAttributes,
          order: CalendarResourceFolderOrderInput
      ): [CalendarResourceFolder!]
    

      CalendarResourceQuestionById(id: ID!): CalendarResourceQuestion
      CalendarResourceQuestion(
          limit: Int,
          where: CalendarResourceQuestionWhereAttributes,
          order: CalendarResourceQuestionOrderInput
      ): [CalendarResourceQuestion!]
    

      CalendarRoomSetupById(id: ID!): CalendarRoomSetup
      CalendarRoomSetup(
          limit: Int,
          where: CalendarRoomSetupWhereAttributes,
          order: CalendarRoomSetupOrderInput
      ): [CalendarRoomSetup!]
    

      CalendarTagById(id: ID!): CalendarTag
      CalendarTag(
          limit: Int,
          where: CalendarTagWhereAttributes,
          order: CalendarTagOrderInput
      ): [CalendarTag!]
    

      CalendarTagGroupById(id: ID!): CalendarTagGroup
      CalendarTagGroup(
          limit: Int,
          where: CalendarTagGroupWhereAttributes,
          order: CalendarTagGroupOrderInput
      ): [CalendarTagGroup!]
    

      CheckinsCheckInById(id: ID!): CheckinsCheckIn
      CheckinsCheckIn(
          limit: Int,
          where: CheckinsCheckInWhereAttributes,
          order: CheckinsCheckInOrderInput
      ): [CheckinsCheckIn!]
    

      CheckinsEventById(id: ID!): CheckinsEvent
      CheckinsEvent(
          limit: Int,
          where: CheckinsEventWhereAttributes,
          order: CheckinsEventOrderInput
      ): [CheckinsEvent!]
    

      CheckinsEventTimeById(id: ID!): CheckinsEventTime
      CheckinsEventTime(
          limit: Int,
          where: CheckinsEventTimeWhereAttributes,
          order: CheckinsEventTimeOrderInput
      ): [CheckinsEventTime!]
    

      CheckinsHeadcountById(id: ID!): CheckinsHeadcount
      CheckinsHeadcount(
          limit: Int,
          where: CheckinsHeadcountWhereAttributes,
          order: CheckinsHeadcountOrderInput
      ): [CheckinsHeadcount!]
    

      CheckinsLabelById(id: ID!): CheckinsLabel
      CheckinsLabel(
          limit: Int,
          
          order: CheckinsLabelOrderInput
      ): [CheckinsLabel!]
    

      CheckinsOptionById(id: ID!): CheckinsOption
      CheckinsOption(
          limit: Int,
          
          order: CheckinsOptionOrderInput
      ): [CheckinsOption!]
    

      CheckinsPassById(id: ID!): CheckinsPass
      CheckinsPass(
          limit: Int,
          where: CheckinsPassWhereAttributes,
          order: CheckinsPassOrderInput
      ): [CheckinsPass!]
    

      CheckinsPersonById(id: ID!): CheckinsPerson
      CheckinsPerson(
          limit: Int,
          where: CheckinsPersonWhereAttributes,
          order: CheckinsPersonOrderInput
      ): [CheckinsPerson!]
    

      CheckinsStationById(id: ID!): CheckinsStation
      CheckinsStation(
          limit: Int,
          
          order: CheckinsStationOrderInput
      ): [CheckinsStation!]
    

      CheckinsThemeById(id: ID!): CheckinsTheme
      CheckinsTheme(
          limit: Int,
          
          order: CheckinsThemeOrderInput
      ): [CheckinsTheme!]
    

      GivingBatchById(id: ID!): GivingBatch
      GivingBatch(
          limit: Int,
          where: GivingBatchWhereAttributes,
          order: GivingBatchOrderInput
      ): [GivingBatch!]
    

      GivingBatchGroupById(id: ID!): GivingBatchGroup
      GivingBatchGroup(
          limit: Int,
          where: GivingBatchGroupWhereAttributes,
          order: GivingBatchGroupOrderInput
      ): [GivingBatchGroup!]
    

      GivingCampusById(id: ID!): GivingCampus
      GivingCampus(
          limit: Int,
          
          order: GivingCampusOrderInput
      ): [GivingCampus!]
    

      GivingDonationById(id: ID!): GivingDonation
      GivingDonation(
          limit: Int,
          where: GivingDonationWhereAttributes,
          order: GivingDonationOrderInput
      ): [GivingDonation!]
    

      GivingFundById(id: ID!): GivingFund
      GivingFund(
          limit: Int,
          where: GivingFundWhereAttributes,
          order: GivingFundOrderInput
      ): [GivingFund!]
    

      GivingLabelById(id: ID!): GivingLabel
      GivingLabel(
          limit: Int,
          where: GivingLabelWhereAttributes,
          order: GivingLabelOrderInput
      ): [GivingLabel!]
    

      GivingPaymentSourceById(id: ID!): GivingPaymentSource
      GivingPaymentSource(
          limit: Int,
          
          order: GivingPaymentSourceOrderInput
      ): [GivingPaymentSource!]
    

      GivingPersonById(id: ID!): GivingPerson
      GivingPerson(
          limit: Int,
          where: GivingPersonWhereAttributes,
          order: GivingPersonOrderInput
      ): [GivingPerson!]
    

      GivingRecurringDonationById(id: ID!): GivingRecurringDonation
      GivingRecurringDonation(
          limit: Int,
          
          order: GivingRecurringDonationOrderInput
      ): [GivingRecurringDonation!]
    

      GroupsEventById(id: ID!): GroupsEvent
      GroupsEvent(
          limit: Int,
          where: GroupsEventWhereAttributes,
          order: GroupsEventOrderInput
      ): [GroupsEvent!]
    

      GroupsGroupById(id: ID!): GroupsGroup
      GroupsGroup(
          limit: Int,
          where: GroupsGroupWhereAttributes,
          order: GroupsGroupOrderInput
      ): [GroupsGroup!]
    

      GroupsGroupApplicationById(id: ID!): GroupsGroupApplication
      GroupsGroupApplication(
          limit: Int,
          where: GroupsGroupApplicationWhereAttributes,
          order: GroupsGroupApplicationOrderInput
      ): [GroupsGroupApplication!]
    

      GroupsGroupTypeById(id: ID!): GroupsGroupType
      GroupsGroupType(
          limit: Int,
          where: GroupsGroupTypeWhereAttributes,
          order: GroupsGroupTypeOrderInput
      ): [GroupsGroupType!]
    

      GroupsPersonById(id: ID!): GroupsPerson
      GroupsPerson(
          limit: Int,
          where: GroupsPersonWhereAttributes,
          order: GroupsPersonOrderInput
      ): [GroupsPerson!]
    

      GroupsTagGroupById(id: ID!): GroupsTagGroup
      GroupsTagGroup(
          limit: Int,
          where: GroupsTagGroupWhereAttributes,
          order: GroupsTagGroupOrderInput
      ): [GroupsTagGroup!]
    

      PeopleAddressById(id: ID!): PeopleAddress
      PeopleAddress(
          limit: Int,
          where: PeopleAddressWhereAttributes,
          order: PeopleAddressOrderInput
      ): [PeopleAddress!]
    

      PeopleAnniversaryCouplesById(id: ID!): PeopleAnniversaryCouples
      PeopleAnniversaryCouples(
          limit: Int,
          
          order: PeopleAnniversaryCouplesOrderInput
      ): [PeopleAnniversaryCouples!]
    

      PeopleAppById(id: ID!): PeopleApp
      PeopleApp(
          limit: Int,
          where: PeopleAppWhereAttributes,
          order: PeopleAppOrderInput
      ): [PeopleApp!]
    

      PeopleBackgroundCheckById(id: ID!): PeopleBackgroundCheck
      PeopleBackgroundCheck(
          limit: Int,
          
          order: PeopleBackgroundCheckOrderInput
      ): [PeopleBackgroundCheck!]
    

      PeopleBirthdayPeopleById(id: ID!): PeopleBirthdayPeople
      PeopleBirthdayPeople(
          limit: Int,
          
          order: PeopleBirthdayPeopleOrderInput
      ): [PeopleBirthdayPeople!]
    

      PeopleCampusById(id: ID!): PeopleCampus
      PeopleCampus(
          limit: Int,
          where: PeopleCampusWhereAttributes,
          order: PeopleCampusOrderInput
      ): [PeopleCampus!]
    

      PeopleCarrierById(id: ID!): PeopleCarrier
      PeopleCarrier(
          limit: Int,
          
          order: PeopleCarrierOrderInput
      ): [PeopleCarrier!]
    

      PeopleEmailById(id: ID!): PeopleEmail
      PeopleEmail(
          limit: Int,
          where: PeopleEmailWhereAttributes,
          order: PeopleEmailOrderInput
      ): [PeopleEmail!]
    

      PeopleFieldDatumById(id: ID!): PeopleFieldDatum
      PeopleFieldDatum(
          limit: Int,
          where: PeopleFieldDatumWhereAttributes,
          order: PeopleFieldDatumOrderInput
      ): [PeopleFieldDatum!]
    

      PeopleFieldDefinitionById(id: ID!): PeopleFieldDefinition
      PeopleFieldDefinition(
          limit: Int,
          where: PeopleFieldDefinitionWhereAttributes,
          order: PeopleFieldDefinitionOrderInput
      ): [PeopleFieldDefinition!]
    

      PeopleFormById(id: ID!): PeopleForm
      PeopleForm(
          limit: Int,
          where: PeopleFormWhereAttributes,
          order: PeopleFormOrderInput
      ): [PeopleForm!]
    

      PeopleHouseholdById(id: ID!): PeopleHousehold
      PeopleHousehold(
          limit: Int,
          where: PeopleHouseholdWhereAttributes,
          order: PeopleHouseholdOrderInput
      ): [PeopleHousehold!]
    

      PeopleInactiveReasonById(id: ID!): PeopleInactiveReason
      PeopleInactiveReason(
          limit: Int,
          where: PeopleInactiveReasonWhereAttributes,
          order: PeopleInactiveReasonOrderInput
      ): [PeopleInactiveReason!]
    

      PeopleListById(id: ID!): PeopleList
      PeopleList(
          limit: Int,
          where: PeopleListWhereAttributes,
          order: PeopleListOrderInput
      ): [PeopleList!]
    

      PeopleListCategoryById(id: ID!): PeopleListCategory
      PeopleListCategory(
          limit: Int,
          where: PeopleListCategoryWhereAttributes,
          order: PeopleListCategoryOrderInput
      ): [PeopleListCategory!]
    

      PeopleMaritalStatusById(id: ID!): PeopleMaritalStatus
      PeopleMaritalStatus(
          limit: Int,
          where: PeopleMaritalStatusWhereAttributes,
          order: PeopleMaritalStatusOrderInput
      ): [PeopleMaritalStatus!]
    

      PeopleMessageById(id: ID!): PeopleMessage
      PeopleMessage(
          limit: Int,
          where: PeopleMessageWhereAttributes,
          order: PeopleMessageOrderInput
      ): [PeopleMessage!]
    

      PeopleMessageGroupById(id: ID!): PeopleMessageGroup
      PeopleMessageGroup(
          limit: Int,
          where: PeopleMessageGroupWhereAttributes,
          order: PeopleMessageGroupOrderInput
      ): [PeopleMessageGroup!]
    

      PeopleNamePrefixById(id: ID!): PeopleNamePrefix
      PeopleNamePrefix(
          limit: Int,
          where: PeopleNamePrefixWhereAttributes,
          order: PeopleNamePrefixOrderInput
      ): [PeopleNamePrefix!]
    

      PeopleNameSuffixById(id: ID!): PeopleNameSuffix
      PeopleNameSuffix(
          limit: Int,
          where: PeopleNameSuffixWhereAttributes,
          order: PeopleNameSuffixOrderInput
      ): [PeopleNameSuffix!]
    

      PeopleNoteById(id: ID!): PeopleNote
      PeopleNote(
          limit: Int,
          where: PeopleNoteWhereAttributes,
          order: PeopleNoteOrderInput
      ): [PeopleNote!]
    

      PeopleNoteCategoryById(id: ID!): PeopleNoteCategory
      PeopleNoteCategory(
          limit: Int,
          where: PeopleNoteCategoryWhereAttributes,
          order: PeopleNoteCategoryOrderInput
      ): [PeopleNoteCategory!]
    

      PeopleNoteCategorySubscriptionById(id: ID!): PeopleNoteCategorySubscription
      PeopleNoteCategorySubscription(
          limit: Int,
          where: PeopleNoteCategorySubscriptionWhereAttributes,
          order: PeopleNoteCategorySubscriptionOrderInput
      ): [PeopleNoteCategorySubscription!]
    

      PeopleOrganizationStatisticsById(id: ID!): PeopleOrganizationStatistics
      PeopleOrganizationStatistics(
          limit: Int,
          
          order: PeopleOrganizationStatisticsOrderInput
      ): [PeopleOrganizationStatistics!]
    

      PeoplePeopleImportById(id: ID!): PeoplePeopleImport
      PeoplePeopleImport(
          limit: Int,
          where: PeoplePeopleImportWhereAttributes,
          order: PeoplePeopleImportOrderInput
      ): [PeoplePeopleImport!]
    

      PeoplePersonById(id: ID!): PeoplePerson
      PeoplePerson(
          limit: Int,
          where: PeoplePersonWhereAttributes,
          order: PeoplePersonOrderInput
      ): [PeoplePerson!]
    

      PeoplePersonMergerById(id: ID!): PeoplePersonMerger
      PeoplePersonMerger(
          limit: Int,
          where: PeoplePersonMergerWhereAttributes,
          order: PeoplePersonMergerOrderInput
      ): [PeoplePersonMerger!]
    

      PeoplePhoneNumberById(id: ID!): PeoplePhoneNumber
      PeoplePhoneNumber(
          limit: Int,
          where: PeoplePhoneNumberWhereAttributes,
          order: PeoplePhoneNumberOrderInput
      ): [PeoplePhoneNumber!]
    

      PeopleReportById(id: ID!): PeopleReport
      PeopleReport(
          limit: Int,
          where: PeopleReportWhereAttributes,
          order: PeopleReportOrderInput
      ): [PeopleReport!]
    

      PeopleSchoolOptionById(id: ID!): PeopleSchoolOption
      PeopleSchoolOption(
          limit: Int,
          where: PeopleSchoolOptionWhereAttributes,
          order: PeopleSchoolOptionOrderInput
      ): [PeopleSchoolOption!]
    

      PeopleSocialProfileById(id: ID!): PeopleSocialProfile
      PeopleSocialProfile(
          limit: Int,
          where: PeopleSocialProfileWhereAttributes,
          order: PeopleSocialProfileOrderInput
      ): [PeopleSocialProfile!]
    

      PeopleTabById(id: ID!): PeopleTab
      PeopleTab(
          limit: Int,
          where: PeopleTabWhereAttributes,
          order: PeopleTabOrderInput
      ): [PeopleTab!]
    

      PeopleWorkflowById(id: ID!): PeopleWorkflow
      PeopleWorkflow(
          limit: Int,
          where: PeopleWorkflowWhereAttributes,
          order: PeopleWorkflowOrderInput
      ): [PeopleWorkflow!]
    

      PublishingChannelById(id: ID!): PublishingChannel
      PublishingChannel(
          limit: Int,
          
          order: PublishingChannelOrderInput
      ): [PublishingChannel!]
    

      PublishingEpisodeById(id: ID!): PublishingEpisode
      PublishingEpisode(
          limit: Int,
          where: PublishingEpisodeWhereAttributes,
          order: PublishingEpisodeOrderInput
      ): [PublishingEpisode!]
    

      PublishingSeriesById(id: ID!): PublishingSeries
      PublishingSeries(
          limit: Int,
          where: PublishingSeriesWhereAttributes,
          order: PublishingSeriesOrderInput
      ): [PublishingSeries!]
    

      ServicesAttachmentTypeById(id: ID!): ServicesAttachmentType
      ServicesAttachmentType(
          limit: Int,
          
          order: ServicesAttachmentTypeOrderInput
      ): [ServicesAttachmentType!]
    

      ServicesChatById(id: ID!): ServicesChat
      ServicesChat(
          limit: Int,
          
          order: ServicesChatOrderInput
      ): [ServicesChat!]
    

      ServicesEmailTemplateById(id: ID!): ServicesEmailTemplate
      ServicesEmailTemplate(
          limit: Int,
          
          order: ServicesEmailTemplateOrderInput
      ): [ServicesEmailTemplate!]
    

      ServicesFolderById(id: ID!): ServicesFolder
      ServicesFolder(
          limit: Int,
          
          order: ServicesFolderOrderInput
      ): [ServicesFolder!]
    

      ServicesMediaById(id: ID!): ServicesMedia
      ServicesMedia(
          limit: Int,
          where: ServicesMediaWhereAttributes,
          order: ServicesMediaOrderInput
      ): [ServicesMedia!]
    

      ServicesOrganizationById(id: ID!): ServicesOrganization
      ServicesOrganization(
          limit: Int,
          
          order: ServicesOrganizationOrderInput
      ): [ServicesOrganization!]
    

      ServicesPersonById(id: ID!): ServicesPerson
      ServicesPerson(
          limit: Int,
          where: ServicesPersonWhereAttributes,
          order: ServicesPersonOrderInput
      ): [ServicesPerson!]
    

      ServicesReportTemplateById(id: ID!): ServicesReportTemplate
      ServicesReportTemplate(
          limit: Int,
          
          order: ServicesReportTemplateOrderInput
      ): [ServicesReportTemplate!]
    

      ServicesSeriesById(id: ID!): ServicesSeries
      ServicesSeries(
          limit: Int,
          where: ServicesSeriesWhereAttributes,
          order: ServicesSeriesOrderInput
      ): [ServicesSeries!]
    

      ServicesServiceTypeById(id: ID!): ServicesServiceType
      ServicesServiceType(
          limit: Int,
          where: ServicesServiceTypeWhereAttributes,
          order: ServicesServiceTypeOrderInput
      ): [ServicesServiceType!]
    

      ServicesSongById(id: ID!): ServicesSong
      ServicesSong(
          limit: Int,
          where: ServicesSongWhereAttributes,
          order: ServicesSongOrderInput
      ): [ServicesSong!]
    

      ServicesTagGroupById(id: ID!): ServicesTagGroup
      ServicesTagGroup(
          limit: Int,
          where: ServicesTagGroupWhereAttributes,
          order: ServicesTagGroupOrderInput
      ): [ServicesTagGroup!]
    

      ServicesTeamById(id: ID!): ServicesTeam
      ServicesTeam(
          limit: Int,
          where: ServicesTeamWhereAttributes,
          order: ServicesTeamOrderInput
      ): [ServicesTeam!]
    
    }

    enum sortEnum {
      asc
      desc
    }
  